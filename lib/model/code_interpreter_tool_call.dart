//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class CodeInterpreterToolCall {
  /// Returns a new [CodeInterpreterToolCall] instance.
  CodeInterpreterToolCall({
    this.type = const CodeInterpreterToolCallTypeEnum._('code_interpreter_call'),
    required this.id,
    required this.status,
    required this.containerId,
    required this.code,
    this.outputs = const [],
  });

  /// The type of the code interpreter tool call. Always `code_interpreter_call`. 
  CodeInterpreterToolCallTypeEnum type;

  /// The unique ID of the code interpreter tool call. 
  String id;

  /// The status of the code interpreter tool call. 
  CodeInterpreterToolCallStatusEnum status;

  /// The ID of the container used to run the code. 
  String containerId;

  /// The code to run, or null if not available. 
  String code;

  /// The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
  List<CodeInterpreterToolCallOutputsInner> outputs;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CodeInterpreterToolCall &&
    other.type == type &&
    other.id == id &&
    other.status == status &&
    other.containerId == containerId &&
    other.code == code &&
    _deepEquality.equals(other.outputs, outputs);

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (type.hashCode) +
    (id.hashCode) +
    (status.hashCode) +
    (containerId.hashCode) +
    (code.hashCode) +
    (outputs.hashCode);

  @override
  String toString() => 'CodeInterpreterToolCall[type=$type, id=$id, status=$status, containerId=$containerId, code=$code, outputs=$outputs]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'type'] = this.type;
      json[r'id'] = this.id;
      json[r'status'] = this.status;
      json[r'container_id'] = this.containerId;
      json[r'code'] = this.code;
      json[r'outputs'] = this.outputs;
    return json;
  }

  /// Returns a new [CodeInterpreterToolCall] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CodeInterpreterToolCall? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CodeInterpreterToolCall[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CodeInterpreterToolCall[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CodeInterpreterToolCall(
        type: CodeInterpreterToolCallTypeEnum.fromJson(json[r'type'])!,
        id: mapValueOfType<String>(json, r'id')!,
        status: CodeInterpreterToolCallStatusEnum.fromJson(json[r'status'])!,
        containerId: mapValueOfType<String>(json, r'container_id')!,
        code: mapValueOfType<String>(json, r'code')!,
        outputs: CodeInterpreterToolCallOutputsInner.listFromJson(json[r'outputs']),
      );
    }
    return null;
  }

  static List<CodeInterpreterToolCall> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CodeInterpreterToolCall>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CodeInterpreterToolCall.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CodeInterpreterToolCall> mapFromJson(dynamic json) {
    final map = <String, CodeInterpreterToolCall>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CodeInterpreterToolCall.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CodeInterpreterToolCall-objects as value to a dart map
  static Map<String, List<CodeInterpreterToolCall>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CodeInterpreterToolCall>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = CodeInterpreterToolCall.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'type',
    'id',
    'status',
    'container_id',
    'code',
    'outputs',
  };
}

/// The type of the code interpreter tool call. Always `code_interpreter_call`. 
class CodeInterpreterToolCallTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const CodeInterpreterToolCallTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const codeInterpreterCall = CodeInterpreterToolCallTypeEnum._(r'code_interpreter_call');

  /// List of all possible values in this [enum][CodeInterpreterToolCallTypeEnum].
  static const values = <CodeInterpreterToolCallTypeEnum>[
    codeInterpreterCall,
  ];

  static CodeInterpreterToolCallTypeEnum? fromJson(dynamic value) => CodeInterpreterToolCallTypeEnumTypeTransformer().decode(value);

  static List<CodeInterpreterToolCallTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CodeInterpreterToolCallTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CodeInterpreterToolCallTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [CodeInterpreterToolCallTypeEnum] to String,
/// and [decode] dynamic data back to [CodeInterpreterToolCallTypeEnum].
class CodeInterpreterToolCallTypeEnumTypeTransformer {
  factory CodeInterpreterToolCallTypeEnumTypeTransformer() => _instance ??= const CodeInterpreterToolCallTypeEnumTypeTransformer._();

  const CodeInterpreterToolCallTypeEnumTypeTransformer._();

  String encode(CodeInterpreterToolCallTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a CodeInterpreterToolCallTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  CodeInterpreterToolCallTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'code_interpreter_call': return CodeInterpreterToolCallTypeEnum.codeInterpreterCall;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [CodeInterpreterToolCallTypeEnumTypeTransformer] instance.
  static CodeInterpreterToolCallTypeEnumTypeTransformer? _instance;
}


/// The status of the code interpreter tool call. 
class CodeInterpreterToolCallStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const CodeInterpreterToolCallStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const inProgress = CodeInterpreterToolCallStatusEnum._(r'in_progress');
  static const completed = CodeInterpreterToolCallStatusEnum._(r'completed');
  static const incomplete = CodeInterpreterToolCallStatusEnum._(r'incomplete');
  static const interpreting = CodeInterpreterToolCallStatusEnum._(r'interpreting');
  static const failed = CodeInterpreterToolCallStatusEnum._(r'failed');

  /// List of all possible values in this [enum][CodeInterpreterToolCallStatusEnum].
  static const values = <CodeInterpreterToolCallStatusEnum>[
    inProgress,
    completed,
    incomplete,
    interpreting,
    failed,
  ];

  static CodeInterpreterToolCallStatusEnum? fromJson(dynamic value) => CodeInterpreterToolCallStatusEnumTypeTransformer().decode(value);

  static List<CodeInterpreterToolCallStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CodeInterpreterToolCallStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CodeInterpreterToolCallStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [CodeInterpreterToolCallStatusEnum] to String,
/// and [decode] dynamic data back to [CodeInterpreterToolCallStatusEnum].
class CodeInterpreterToolCallStatusEnumTypeTransformer {
  factory CodeInterpreterToolCallStatusEnumTypeTransformer() => _instance ??= const CodeInterpreterToolCallStatusEnumTypeTransformer._();

  const CodeInterpreterToolCallStatusEnumTypeTransformer._();

  String encode(CodeInterpreterToolCallStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a CodeInterpreterToolCallStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  CodeInterpreterToolCallStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'in_progress': return CodeInterpreterToolCallStatusEnum.inProgress;
        case r'completed': return CodeInterpreterToolCallStatusEnum.completed;
        case r'incomplete': return CodeInterpreterToolCallStatusEnum.incomplete;
        case r'interpreting': return CodeInterpreterToolCallStatusEnum.interpreting;
        case r'failed': return CodeInterpreterToolCallStatusEnum.failed;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [CodeInterpreterToolCallStatusEnumTypeTransformer] instance.
  static CodeInterpreterToolCallStatusEnumTypeTransformer? _instance;
}


