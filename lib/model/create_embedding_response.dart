//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class CreateEmbeddingResponse {
  /// Returns a new [CreateEmbeddingResponse] instance.
  CreateEmbeddingResponse({
    this.data = const [],
    required this.model,
    required this.object,
    required this.usage,
  });

  /// The list of embeddings generated by the model.
  List<Embedding> data;

  /// The name of the model used to generate the embedding.
  String model;

  /// The object type, which is always \"list\".
  CreateEmbeddingResponseObjectEnum object;

  CreateEmbeddingResponseUsage usage;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CreateEmbeddingResponse &&
    _deepEquality.equals(other.data, data) &&
    other.model == model &&
    other.object == object &&
    other.usage == usage;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (data.hashCode) +
    (model.hashCode) +
    (object.hashCode) +
    (usage.hashCode);

  @override
  String toString() => 'CreateEmbeddingResponse[data=$data, model=$model, object=$object, usage=$usage]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'data'] = this.data;
      json[r'model'] = this.model;
      json[r'object'] = this.object;
      json[r'usage'] = this.usage;
    return json;
  }

  /// Returns a new [CreateEmbeddingResponse] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CreateEmbeddingResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CreateEmbeddingResponse[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CreateEmbeddingResponse[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CreateEmbeddingResponse(
        data: Embedding.listFromJson(json[r'data']),
        model: mapValueOfType<String>(json, r'model')!,
        object: CreateEmbeddingResponseObjectEnum.fromJson(json[r'object'])!,
        usage: CreateEmbeddingResponseUsage.fromJson(json[r'usage'])!,
      );
    }
    return null;
  }

  static List<CreateEmbeddingResponse> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CreateEmbeddingResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreateEmbeddingResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CreateEmbeddingResponse> mapFromJson(dynamic json) {
    final map = <String, CreateEmbeddingResponse>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreateEmbeddingResponse.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CreateEmbeddingResponse-objects as value to a dart map
  static Map<String, List<CreateEmbeddingResponse>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CreateEmbeddingResponse>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = CreateEmbeddingResponse.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'data',
    'model',
    'object',
    'usage',
  };
}

/// The object type, which is always \"list\".
class CreateEmbeddingResponseObjectEnum {
  /// Instantiate a new enum with the provided [value].
  const CreateEmbeddingResponseObjectEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const list = CreateEmbeddingResponseObjectEnum._(r'list');

  /// List of all possible values in this [enum][CreateEmbeddingResponseObjectEnum].
  static const values = <CreateEmbeddingResponseObjectEnum>[
    list,
  ];

  static CreateEmbeddingResponseObjectEnum? fromJson(dynamic value) => CreateEmbeddingResponseObjectEnumTypeTransformer().decode(value);

  static List<CreateEmbeddingResponseObjectEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CreateEmbeddingResponseObjectEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreateEmbeddingResponseObjectEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [CreateEmbeddingResponseObjectEnum] to String,
/// and [decode] dynamic data back to [CreateEmbeddingResponseObjectEnum].
class CreateEmbeddingResponseObjectEnumTypeTransformer {
  factory CreateEmbeddingResponseObjectEnumTypeTransformer() => _instance ??= const CreateEmbeddingResponseObjectEnumTypeTransformer._();

  const CreateEmbeddingResponseObjectEnumTypeTransformer._();

  String encode(CreateEmbeddingResponseObjectEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a CreateEmbeddingResponseObjectEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  CreateEmbeddingResponseObjectEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'list': return CreateEmbeddingResponseObjectEnum.list;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [CreateEmbeddingResponseObjectEnumTypeTransformer] instance.
  static CreateEmbeddingResponseObjectEnumTypeTransformer? _instance;
}


