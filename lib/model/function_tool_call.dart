//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class FunctionToolCall {
  /// Returns a new [FunctionToolCall] instance.
  FunctionToolCall({
    this.id,
    required this.type,
    required this.callId,
    required this.name,
    required this.arguments,
    this.status,
  });

  /// The unique ID of the function tool call. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  /// The type of the function tool call. Always `function_call`. 
  FunctionToolCallTypeEnum type;

  /// The unique ID of the function tool call generated by the model. 
  String callId;

  /// The name of the function to run. 
  String name;

  /// A JSON string of the arguments to pass to the function. 
  String arguments;

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
  FunctionToolCallStatusEnum? status;

  @override
  bool operator ==(Object other) => identical(this, other) || other is FunctionToolCall &&
    other.id == id &&
    other.type == type &&
    other.callId == callId &&
    other.name == name &&
    other.arguments == arguments &&
    other.status == status;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (type.hashCode) +
    (callId.hashCode) +
    (name.hashCode) +
    (arguments.hashCode) +
    (status == null ? 0 : status!.hashCode);

  @override
  String toString() => 'FunctionToolCall[id=$id, type=$type, callId=$callId, name=$name, arguments=$arguments, status=$status]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
      json[r'type'] = this.type;
      json[r'call_id'] = this.callId;
      json[r'name'] = this.name;
      json[r'arguments'] = this.arguments;
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    return json;
  }

  /// Returns a new [FunctionToolCall] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static FunctionToolCall? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "FunctionToolCall[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "FunctionToolCall[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return FunctionToolCall(
        id: mapValueOfType<String>(json, r'id'),
        type: FunctionToolCallTypeEnum.fromJson(json[r'type'])!,
        callId: mapValueOfType<String>(json, r'call_id')!,
        name: mapValueOfType<String>(json, r'name')!,
        arguments: mapValueOfType<String>(json, r'arguments')!,
        status: FunctionToolCallStatusEnum.fromJson(json[r'status']),
      );
    }
    return null;
  }

  static List<FunctionToolCall> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCall>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCall.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, FunctionToolCall> mapFromJson(dynamic json) {
    final map = <String, FunctionToolCall>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = FunctionToolCall.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of FunctionToolCall-objects as value to a dart map
  static Map<String, List<FunctionToolCall>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<FunctionToolCall>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = FunctionToolCall.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'type',
    'call_id',
    'name',
    'arguments',
  };
}

/// The type of the function tool call. Always `function_call`. 
class FunctionToolCallTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const FunctionToolCallTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const functionCall = FunctionToolCallTypeEnum._(r'function_call');

  /// List of all possible values in this [enum][FunctionToolCallTypeEnum].
  static const values = <FunctionToolCallTypeEnum>[
    functionCall,
  ];

  static FunctionToolCallTypeEnum? fromJson(dynamic value) => FunctionToolCallTypeEnumTypeTransformer().decode(value);

  static List<FunctionToolCallTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCallTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCallTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [FunctionToolCallTypeEnum] to String,
/// and [decode] dynamic data back to [FunctionToolCallTypeEnum].
class FunctionToolCallTypeEnumTypeTransformer {
  factory FunctionToolCallTypeEnumTypeTransformer() => _instance ??= const FunctionToolCallTypeEnumTypeTransformer._();

  const FunctionToolCallTypeEnumTypeTransformer._();

  String encode(FunctionToolCallTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a FunctionToolCallTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  FunctionToolCallTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'function_call': return FunctionToolCallTypeEnum.functionCall;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [FunctionToolCallTypeEnumTypeTransformer] instance.
  static FunctionToolCallTypeEnumTypeTransformer? _instance;
}


/// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
class FunctionToolCallStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const FunctionToolCallStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const inProgress = FunctionToolCallStatusEnum._(r'in_progress');
  static const completed = FunctionToolCallStatusEnum._(r'completed');
  static const incomplete = FunctionToolCallStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][FunctionToolCallStatusEnum].
  static const values = <FunctionToolCallStatusEnum>[
    inProgress,
    completed,
    incomplete,
  ];

  static FunctionToolCallStatusEnum? fromJson(dynamic value) => FunctionToolCallStatusEnumTypeTransformer().decode(value);

  static List<FunctionToolCallStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCallStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCallStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [FunctionToolCallStatusEnum] to String,
/// and [decode] dynamic data back to [FunctionToolCallStatusEnum].
class FunctionToolCallStatusEnumTypeTransformer {
  factory FunctionToolCallStatusEnumTypeTransformer() => _instance ??= const FunctionToolCallStatusEnumTypeTransformer._();

  const FunctionToolCallStatusEnumTypeTransformer._();

  String encode(FunctionToolCallStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a FunctionToolCallStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  FunctionToolCallStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'in_progress': return FunctionToolCallStatusEnum.inProgress;
        case r'completed': return FunctionToolCallStatusEnum.completed;
        case r'incomplete': return FunctionToolCallStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [FunctionToolCallStatusEnumTypeTransformer] instance.
  static FunctionToolCallStatusEnumTypeTransformer? _instance;
}


