//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class FunctionToolCallOutputResource {
  /// Returns a new [FunctionToolCallOutputResource] instance.
  FunctionToolCallOutputResource({
    required this.id,
    required this.type,
    required this.callId,
    required this.output,
    this.status,
  });

  /// The unique ID of the function call tool output. 
  String id;

  /// The type of the function tool call output. Always `function_call_output`. 
  FunctionToolCallOutputResourceTypeEnum type;

  /// The unique ID of the function tool call generated by the model. 
  String callId;

  /// A JSON string of the output of the function tool call. 
  String output;

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
  FunctionToolCallOutputResourceStatusEnum? status;

  @override
  bool operator ==(Object other) => identical(this, other) || other is FunctionToolCallOutputResource &&
    other.id == id &&
    other.type == type &&
    other.callId == callId &&
    other.output == output &&
    other.status == status;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id.hashCode) +
    (type.hashCode) +
    (callId.hashCode) +
    (output.hashCode) +
    (status == null ? 0 : status!.hashCode);

  @override
  String toString() => 'FunctionToolCallOutputResource[id=$id, type=$type, callId=$callId, output=$output, status=$status]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'id'] = this.id;
      json[r'type'] = this.type;
      json[r'call_id'] = this.callId;
      json[r'output'] = this.output;
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    return json;
  }

  /// Returns a new [FunctionToolCallOutputResource] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static FunctionToolCallOutputResource? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "FunctionToolCallOutputResource[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "FunctionToolCallOutputResource[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return FunctionToolCallOutputResource(
        id: mapValueOfType<String>(json, r'id')!,
        type: FunctionToolCallOutputResourceTypeEnum.fromJson(json[r'type'])!,
        callId: mapValueOfType<String>(json, r'call_id')!,
        output: mapValueOfType<String>(json, r'output')!,
        status: FunctionToolCallOutputResourceStatusEnum.fromJson(json[r'status']),
      );
    }
    return null;
  }

  static List<FunctionToolCallOutputResource> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCallOutputResource>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCallOutputResource.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, FunctionToolCallOutputResource> mapFromJson(dynamic json) {
    final map = <String, FunctionToolCallOutputResource>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = FunctionToolCallOutputResource.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of FunctionToolCallOutputResource-objects as value to a dart map
  static Map<String, List<FunctionToolCallOutputResource>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<FunctionToolCallOutputResource>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = FunctionToolCallOutputResource.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'id',
    'type',
    'call_id',
    'output',
  };
}

/// The type of the function tool call output. Always `function_call_output`. 
class FunctionToolCallOutputResourceTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const FunctionToolCallOutputResourceTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const functionCallOutput = FunctionToolCallOutputResourceTypeEnum._(r'function_call_output');

  /// List of all possible values in this [enum][FunctionToolCallOutputResourceTypeEnum].
  static const values = <FunctionToolCallOutputResourceTypeEnum>[
    functionCallOutput,
  ];

  static FunctionToolCallOutputResourceTypeEnum? fromJson(dynamic value) => FunctionToolCallOutputResourceTypeEnumTypeTransformer().decode(value);

  static List<FunctionToolCallOutputResourceTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCallOutputResourceTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCallOutputResourceTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [FunctionToolCallOutputResourceTypeEnum] to String,
/// and [decode] dynamic data back to [FunctionToolCallOutputResourceTypeEnum].
class FunctionToolCallOutputResourceTypeEnumTypeTransformer {
  factory FunctionToolCallOutputResourceTypeEnumTypeTransformer() => _instance ??= const FunctionToolCallOutputResourceTypeEnumTypeTransformer._();

  const FunctionToolCallOutputResourceTypeEnumTypeTransformer._();

  String encode(FunctionToolCallOutputResourceTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a FunctionToolCallOutputResourceTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  FunctionToolCallOutputResourceTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'function_call_output': return FunctionToolCallOutputResourceTypeEnum.functionCallOutput;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [FunctionToolCallOutputResourceTypeEnumTypeTransformer] instance.
  static FunctionToolCallOutputResourceTypeEnumTypeTransformer? _instance;
}


/// The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API. 
class FunctionToolCallOutputResourceStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const FunctionToolCallOutputResourceStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const inProgress = FunctionToolCallOutputResourceStatusEnum._(r'in_progress');
  static const completed = FunctionToolCallOutputResourceStatusEnum._(r'completed');
  static const incomplete = FunctionToolCallOutputResourceStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][FunctionToolCallOutputResourceStatusEnum].
  static const values = <FunctionToolCallOutputResourceStatusEnum>[
    inProgress,
    completed,
    incomplete,
  ];

  static FunctionToolCallOutputResourceStatusEnum? fromJson(dynamic value) => FunctionToolCallOutputResourceStatusEnumTypeTransformer().decode(value);

  static List<FunctionToolCallOutputResourceStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <FunctionToolCallOutputResourceStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FunctionToolCallOutputResourceStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [FunctionToolCallOutputResourceStatusEnum] to String,
/// and [decode] dynamic data back to [FunctionToolCallOutputResourceStatusEnum].
class FunctionToolCallOutputResourceStatusEnumTypeTransformer {
  factory FunctionToolCallOutputResourceStatusEnumTypeTransformer() => _instance ??= const FunctionToolCallOutputResourceStatusEnumTypeTransformer._();

  const FunctionToolCallOutputResourceStatusEnumTypeTransformer._();

  String encode(FunctionToolCallOutputResourceStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a FunctionToolCallOutputResourceStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  FunctionToolCallOutputResourceStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'in_progress': return FunctionToolCallOutputResourceStatusEnum.inProgress;
        case r'completed': return FunctionToolCallOutputResourceStatusEnum.completed;
        case r'incomplete': return FunctionToolCallOutputResourceStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [FunctionToolCallOutputResourceStatusEnumTypeTransformer] instance.
  static FunctionToolCallOutputResourceStatusEnumTypeTransformer? _instance;
}


