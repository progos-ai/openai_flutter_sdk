//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class InputItem {
  /// Returns a new [InputItem] instance.
  InputItem({
    required this.role,
    this.content = const [],
    required this.type,
    required this.status,
    required this.id,
    this.queries = const [],
    this.results = const [],
    required this.callId,
    required this.action,
    this.pendingSafetyChecks = const [],
    required this.output,
    this.acknowledgedSafetyChecks = const [],
    required this.name,
    required this.arguments,
    this.encryptedContent,
    this.summary = const [],
    required this.result,
    required this.containerId,
    required this.code,
    this.outputs = const [],
    required this.serverLabel,
    this.tools = const [],
    this.error,
    required this.approvalRequestId,
    required this.approve,
    this.reason,
  });

  /// The role of the output message. Always `assistant`. 
  InputItemRoleEnum role;

  /// The content of the output message. 
  List<OutputContent> content;

  /// The type of the message input. Always `message`. 
  InputItemTypeEnum type;

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  InputItemStatusEnum status;

  /// The ID of the item to reference.
  String id;

  /// The queries used to search for files. 
  List<String> queries;

  /// The results of the file search tool call. 
  List<FileSearchToolCallResultsInner> results;

  /// The unique ID of the local shell tool call generated by the model. 
  String callId;

  LocalShellExecAction action;

  /// The pending safety checks for the computer call. 
  List<ComputerToolCallSafetyCheck> pendingSafetyChecks;

  /// The output from the tool call. 
  String output;

  /// The safety checks reported by the API that have been acknowledged by the developer.
  List<ComputerCallSafetyCheckParam> acknowledgedSafetyChecks;

  /// The name of the tool that was run. 
  String name;

  /// A JSON string of the arguments passed to the tool. 
  String arguments;

  /// The encrypted content of the reasoning item - populated when a response is generated with `reasoning.encrypted_content` in the `include` parameter. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? encryptedContent;

  /// Reasoning text contents. 
  List<ReasoningItemSummaryInner> summary;

  /// The generated image encoded in base64. 
  String result;

  /// The ID of the container used to run the code. 
  String containerId;

  /// The code to run, or null if not available. 
  String code;

  /// The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
  List<CodeInterpreterToolCallOutputsInner> outputs;

  /// The label of the MCP server running the tool. 
  String serverLabel;

  /// The tools available on the server. 
  List<MCPListToolsTool> tools;

  /// The error from the tool call, if any. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? error;

  /// The ID of the approval request being answered. 
  String approvalRequestId;

  /// Whether the request was approved. 
  bool approve;

  /// Optional reason for the decision. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? reason;

  @override
  bool operator ==(Object other) => identical(this, other) || other is InputItem &&
    other.role == role &&
    _deepEquality.equals(other.content, content) &&
    other.type == type &&
    other.status == status &&
    other.id == id &&
    _deepEquality.equals(other.queries, queries) &&
    _deepEquality.equals(other.results, results) &&
    other.callId == callId &&
    other.action == action &&
    _deepEquality.equals(other.pendingSafetyChecks, pendingSafetyChecks) &&
    other.output == output &&
    _deepEquality.equals(other.acknowledgedSafetyChecks, acknowledgedSafetyChecks) &&
    other.name == name &&
    other.arguments == arguments &&
    other.encryptedContent == encryptedContent &&
    _deepEquality.equals(other.summary, summary) &&
    other.result == result &&
    other.containerId == containerId &&
    other.code == code &&
    _deepEquality.equals(other.outputs, outputs) &&
    other.serverLabel == serverLabel &&
    _deepEquality.equals(other.tools, tools) &&
    other.error == error &&
    other.approvalRequestId == approvalRequestId &&
    other.approve == approve &&
    other.reason == reason;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (role.hashCode) +
    (content.hashCode) +
    (type.hashCode) +
    (status.hashCode) +
    (id.hashCode) +
    (queries.hashCode) +
    (results.hashCode) +
    (callId.hashCode) +
    (action.hashCode) +
    (pendingSafetyChecks.hashCode) +
    (output.hashCode) +
    (acknowledgedSafetyChecks.hashCode) +
    (name.hashCode) +
    (arguments.hashCode) +
    (encryptedContent == null ? 0 : encryptedContent!.hashCode) +
    (summary.hashCode) +
    (result.hashCode) +
    (containerId.hashCode) +
    (code.hashCode) +
    (outputs.hashCode) +
    (serverLabel.hashCode) +
    (tools.hashCode) +
    (error == null ? 0 : error!.hashCode) +
    (approvalRequestId.hashCode) +
    (approve.hashCode) +
    (reason == null ? 0 : reason!.hashCode);

  @override
  String toString() => 'InputItem[role=$role, content=$content, type=$type, status=$status, id=$id, queries=$queries, results=$results, callId=$callId, action=$action, pendingSafetyChecks=$pendingSafetyChecks, output=$output, acknowledgedSafetyChecks=$acknowledgedSafetyChecks, name=$name, arguments=$arguments, encryptedContent=$encryptedContent, summary=$summary, result=$result, containerId=$containerId, code=$code, outputs=$outputs, serverLabel=$serverLabel, tools=$tools, error=$error, approvalRequestId=$approvalRequestId, approve=$approve, reason=$reason]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'role'] = this.role;
      json[r'content'] = this.content;
      json[r'type'] = this.type;
      json[r'status'] = this.status;
      json[r'id'] = this.id;
      json[r'queries'] = this.queries;
      json[r'results'] = this.results;
      json[r'call_id'] = this.callId;
      json[r'action'] = this.action;
      json[r'pending_safety_checks'] = this.pendingSafetyChecks;
      json[r'output'] = this.output;
      json[r'acknowledged_safety_checks'] = this.acknowledgedSafetyChecks;
      json[r'name'] = this.name;
      json[r'arguments'] = this.arguments;
    if (this.encryptedContent != null) {
      json[r'encrypted_content'] = this.encryptedContent;
    } else {
      json[r'encrypted_content'] = null;
    }
      json[r'summary'] = this.summary;
      json[r'result'] = this.result;
      json[r'container_id'] = this.containerId;
      json[r'code'] = this.code;
      json[r'outputs'] = this.outputs;
      json[r'server_label'] = this.serverLabel;
      json[r'tools'] = this.tools;
    if (this.error != null) {
      json[r'error'] = this.error;
    } else {
      json[r'error'] = null;
    }
      json[r'approval_request_id'] = this.approvalRequestId;
      json[r'approve'] = this.approve;
    if (this.reason != null) {
      json[r'reason'] = this.reason;
    } else {
      json[r'reason'] = null;
    }
    return json;
  }

  /// Returns a new [InputItem] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static InputItem? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "InputItem[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "InputItem[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return InputItem(
        role: InputItemRoleEnum.fromJson(json[r'role'])!,
        content: OutputContent.listFromJson(json[r'content']),
        type: InputItemTypeEnum.fromJson(json[r'type'])!,
        status: InputItemStatusEnum.fromJson(json[r'status'])!,
        id: mapValueOfType<String>(json, r'id')!,
        queries: json[r'queries'] is Iterable
            ? (json[r'queries'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        results: FileSearchToolCallResultsInner.listFromJson(json[r'results']),
        callId: mapValueOfType<String>(json, r'call_id')!,
        action: LocalShellExecAction.fromJson(json[r'action'])!,
        pendingSafetyChecks: ComputerToolCallSafetyCheck.listFromJson(json[r'pending_safety_checks']),
        output: mapValueOfType<String>(json, r'output')!,
        acknowledgedSafetyChecks: ComputerCallSafetyCheckParam.listFromJson(json[r'acknowledged_safety_checks']),
        name: mapValueOfType<String>(json, r'name')!,
        arguments: mapValueOfType<String>(json, r'arguments')!,
        encryptedContent: mapValueOfType<String>(json, r'encrypted_content'),
        summary: ReasoningItemSummaryInner.listFromJson(json[r'summary']),
        result: mapValueOfType<String>(json, r'result')!,
        containerId: mapValueOfType<String>(json, r'container_id')!,
        code: mapValueOfType<String>(json, r'code')!,
        outputs: CodeInterpreterToolCallOutputsInner.listFromJson(json[r'outputs']),
        serverLabel: mapValueOfType<String>(json, r'server_label')!,
        tools: MCPListToolsTool.listFromJson(json[r'tools']),
        error: mapValueOfType<String>(json, r'error'),
        approvalRequestId: mapValueOfType<String>(json, r'approval_request_id')!,
        approve: mapValueOfType<bool>(json, r'approve')!,
        reason: mapValueOfType<String>(json, r'reason'),
      );
    }
    return null;
  }

  static List<InputItem> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <InputItem>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = InputItem.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, InputItem> mapFromJson(dynamic json) {
    final map = <String, InputItem>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = InputItem.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of InputItem-objects as value to a dart map
  static Map<String, List<InputItem>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<InputItem>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = InputItem.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'role',
    'content',
    'type',
    'status',
    'id',
    'queries',
    'call_id',
    'action',
    'pending_safety_checks',
    'output',
    'name',
    'arguments',
    'summary',
    'result',
    'container_id',
    'code',
    'outputs',
    'server_label',
    'tools',
    'approval_request_id',
    'approve',
  };
}

/// The role of the output message. Always `assistant`. 
class InputItemRoleEnum {
  /// Instantiate a new enum with the provided [value].
  const InputItemRoleEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const assistant = InputItemRoleEnum._(r'assistant');

  /// List of all possible values in this [enum][InputItemRoleEnum].
  static const values = <InputItemRoleEnum>[
    assistant,
  ];

  static InputItemRoleEnum? fromJson(dynamic value) => InputItemRoleEnumTypeTransformer().decode(value);

  static List<InputItemRoleEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <InputItemRoleEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = InputItemRoleEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [InputItemRoleEnum] to String,
/// and [decode] dynamic data back to [InputItemRoleEnum].
class InputItemRoleEnumTypeTransformer {
  factory InputItemRoleEnumTypeTransformer() => _instance ??= const InputItemRoleEnumTypeTransformer._();

  const InputItemRoleEnumTypeTransformer._();

  String encode(InputItemRoleEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a InputItemRoleEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  InputItemRoleEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'assistant': return InputItemRoleEnum.assistant;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [InputItemRoleEnumTypeTransformer] instance.
  static InputItemRoleEnumTypeTransformer? _instance;
}


/// The type of the message input. Always `message`. 
class InputItemTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const InputItemTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const message = InputItemTypeEnum._(r'message');
  static const mcpCall = InputItemTypeEnum._(r'mcp_call');
  static const itemReference = InputItemTypeEnum._(r'item_reference');

  /// List of all possible values in this [enum][InputItemTypeEnum].
  static const values = <InputItemTypeEnum>[
    message,
    mcpCall,
    itemReference,
  ];

  static InputItemTypeEnum? fromJson(dynamic value) => InputItemTypeEnumTypeTransformer().decode(value);

  static List<InputItemTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <InputItemTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = InputItemTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [InputItemTypeEnum] to String,
/// and [decode] dynamic data back to [InputItemTypeEnum].
class InputItemTypeEnumTypeTransformer {
  factory InputItemTypeEnumTypeTransformer() => _instance ??= const InputItemTypeEnumTypeTransformer._();

  const InputItemTypeEnumTypeTransformer._();

  String encode(InputItemTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a InputItemTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  InputItemTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'message': return InputItemTypeEnum.message;
        case r'mcp_call': return InputItemTypeEnum.mcpCall;
        case r'item_reference': return InputItemTypeEnum.itemReference;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [InputItemTypeEnumTypeTransformer] instance.
  static InputItemTypeEnumTypeTransformer? _instance;
}


/// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
class InputItemStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const InputItemStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const inProgress = InputItemStatusEnum._(r'in_progress');
  static const completed = InputItemStatusEnum._(r'completed');
  static const incomplete = InputItemStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][InputItemStatusEnum].
  static const values = <InputItemStatusEnum>[
    inProgress,
    completed,
    incomplete,
  ];

  static InputItemStatusEnum? fromJson(dynamic value) => InputItemStatusEnumTypeTransformer().decode(value);

  static List<InputItemStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <InputItemStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = InputItemStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [InputItemStatusEnum] to String,
/// and [decode] dynamic data back to [InputItemStatusEnum].
class InputItemStatusEnumTypeTransformer {
  factory InputItemStatusEnumTypeTransformer() => _instance ??= const InputItemStatusEnumTypeTransformer._();

  const InputItemStatusEnumTypeTransformer._();

  String encode(InputItemStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a InputItemStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  InputItemStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'in_progress': return InputItemStatusEnum.inProgress;
        case r'completed': return InputItemStatusEnum.completed;
        case r'incomplete': return InputItemStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [InputItemStatusEnumTypeTransformer] instance.
  static InputItemStatusEnumTypeTransformer? _instance;
}


