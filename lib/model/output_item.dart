//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class OutputItem {
  /// Returns a new [OutputItem] instance.
  OutputItem({
    required this.id,
    required this.type,
    required this.role,
    this.content = const [],
    required this.status,
    this.queries = const [],
    this.results = const [],
    required this.callId,
    required this.name,
    required this.arguments,
    required this.action,
    this.pendingSafetyChecks = const [],
    this.encryptedContent,
    this.summary = const [],
    required this.result,
    required this.containerId,
    required this.code,
    this.outputs = const [],
    required this.serverLabel,
    this.output,
    this.error,
    this.tools = const [],
  });

  /// The unique ID of the approval request. 
  String id;

  /// The type of the output message. Always `message`. 
  OutputItemTypeEnum type;

  /// The role of the output message. Always `assistant`. 
  OutputItemRoleEnum role;

  /// The content of the output message. 
  List<OutputContent> content;

  /// The status of the local shell call. 
  OutputItemStatusEnum status;

  /// The queries used to search for files. 
  List<String> queries;

  /// The results of the file search tool call. 
  List<FileSearchToolCallResultsInner> results;

  /// The unique ID of the local shell tool call generated by the model. 
  String callId;

  /// The name of the tool to run. 
  String name;

  /// A JSON string of arguments for the tool. 
  String arguments;

  LocalShellExecAction action;

  /// The pending safety checks for the computer call. 
  List<ComputerToolCallSafetyCheck> pendingSafetyChecks;

  /// The encrypted content of the reasoning item - populated when a response is generated with `reasoning.encrypted_content` in the `include` parameter. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? encryptedContent;

  /// Reasoning text contents. 
  List<ReasoningItemSummaryInner> summary;

  /// The generated image encoded in base64. 
  String result;

  /// The ID of the container used to run the code. 
  String containerId;

  /// The code to run, or null if not available. 
  String code;

  /// The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
  List<CodeInterpreterToolCallOutputsInner> outputs;

  /// The label of the MCP server making the request. 
  String serverLabel;

  /// The output from the tool call. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? output;

  /// Error message if the server could not list tools. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? error;

  /// The tools available on the server. 
  List<MCPListToolsTool> tools;

  @override
  bool operator ==(Object other) => identical(this, other) || other is OutputItem &&
    other.id == id &&
    other.type == type &&
    other.role == role &&
    _deepEquality.equals(other.content, content) &&
    other.status == status &&
    _deepEquality.equals(other.queries, queries) &&
    _deepEquality.equals(other.results, results) &&
    other.callId == callId &&
    other.name == name &&
    other.arguments == arguments &&
    other.action == action &&
    _deepEquality.equals(other.pendingSafetyChecks, pendingSafetyChecks) &&
    other.encryptedContent == encryptedContent &&
    _deepEquality.equals(other.summary, summary) &&
    other.result == result &&
    other.containerId == containerId &&
    other.code == code &&
    _deepEquality.equals(other.outputs, outputs) &&
    other.serverLabel == serverLabel &&
    other.output == output &&
    other.error == error &&
    _deepEquality.equals(other.tools, tools);

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id.hashCode) +
    (type.hashCode) +
    (role.hashCode) +
    (content.hashCode) +
    (status.hashCode) +
    (queries.hashCode) +
    (results.hashCode) +
    (callId.hashCode) +
    (name.hashCode) +
    (arguments.hashCode) +
    (action.hashCode) +
    (pendingSafetyChecks.hashCode) +
    (encryptedContent == null ? 0 : encryptedContent!.hashCode) +
    (summary.hashCode) +
    (result.hashCode) +
    (containerId.hashCode) +
    (code.hashCode) +
    (outputs.hashCode) +
    (serverLabel.hashCode) +
    (output == null ? 0 : output!.hashCode) +
    (error == null ? 0 : error!.hashCode) +
    (tools.hashCode);

  @override
  String toString() => 'OutputItem[id=$id, type=$type, role=$role, content=$content, status=$status, queries=$queries, results=$results, callId=$callId, name=$name, arguments=$arguments, action=$action, pendingSafetyChecks=$pendingSafetyChecks, encryptedContent=$encryptedContent, summary=$summary, result=$result, containerId=$containerId, code=$code, outputs=$outputs, serverLabel=$serverLabel, output=$output, error=$error, tools=$tools]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'id'] = this.id;
      json[r'type'] = this.type;
      json[r'role'] = this.role;
      json[r'content'] = this.content;
      json[r'status'] = this.status;
      json[r'queries'] = this.queries;
      json[r'results'] = this.results;
      json[r'call_id'] = this.callId;
      json[r'name'] = this.name;
      json[r'arguments'] = this.arguments;
      json[r'action'] = this.action;
      json[r'pending_safety_checks'] = this.pendingSafetyChecks;
    if (this.encryptedContent != null) {
      json[r'encrypted_content'] = this.encryptedContent;
    } else {
      json[r'encrypted_content'] = null;
    }
      json[r'summary'] = this.summary;
      json[r'result'] = this.result;
      json[r'container_id'] = this.containerId;
      json[r'code'] = this.code;
      json[r'outputs'] = this.outputs;
      json[r'server_label'] = this.serverLabel;
    if (this.output != null) {
      json[r'output'] = this.output;
    } else {
      json[r'output'] = null;
    }
    if (this.error != null) {
      json[r'error'] = this.error;
    } else {
      json[r'error'] = null;
    }
      json[r'tools'] = this.tools;
    return json;
  }

  /// Returns a new [OutputItem] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static OutputItem? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "OutputItem[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "OutputItem[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return OutputItem(
        id: mapValueOfType<String>(json, r'id')!,
        type: OutputItemTypeEnum.fromJson(json[r'type'])!,
        role: OutputItemRoleEnum.fromJson(json[r'role'])!,
        content: OutputContent.listFromJson(json[r'content']),
        status: OutputItemStatusEnum.fromJson(json[r'status'])!,
        queries: json[r'queries'] is Iterable
            ? (json[r'queries'] as Iterable).cast<String>().toList(growable: false)
            : const [],
        results: FileSearchToolCallResultsInner.listFromJson(json[r'results']),
        callId: mapValueOfType<String>(json, r'call_id')!,
        name: mapValueOfType<String>(json, r'name')!,
        arguments: mapValueOfType<String>(json, r'arguments')!,
        action: LocalShellExecAction.fromJson(json[r'action'])!,
        pendingSafetyChecks: ComputerToolCallSafetyCheck.listFromJson(json[r'pending_safety_checks']),
        encryptedContent: mapValueOfType<String>(json, r'encrypted_content'),
        summary: ReasoningItemSummaryInner.listFromJson(json[r'summary']),
        result: mapValueOfType<String>(json, r'result')!,
        containerId: mapValueOfType<String>(json, r'container_id')!,
        code: mapValueOfType<String>(json, r'code')!,
        outputs: CodeInterpreterToolCallOutputsInner.listFromJson(json[r'outputs']),
        serverLabel: mapValueOfType<String>(json, r'server_label')!,
        output: mapValueOfType<String>(json, r'output'),
        error: mapValueOfType<String>(json, r'error'),
        tools: MCPListToolsTool.listFromJson(json[r'tools']),
      );
    }
    return null;
  }

  static List<OutputItem> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <OutputItem>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = OutputItem.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, OutputItem> mapFromJson(dynamic json) {
    final map = <String, OutputItem>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = OutputItem.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of OutputItem-objects as value to a dart map
  static Map<String, List<OutputItem>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<OutputItem>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = OutputItem.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'id',
    'type',
    'role',
    'content',
    'status',
    'queries',
    'call_id',
    'name',
    'arguments',
    'action',
    'pending_safety_checks',
    'summary',
    'result',
    'container_id',
    'code',
    'outputs',
    'server_label',
    'tools',
  };
}

/// The type of the output message. Always `message`. 
class OutputItemTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const OutputItemTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const message = OutputItemTypeEnum._(r'message');
  static const fileSearchCall = OutputItemTypeEnum._(r'file_search_call');
  static const functionCall = OutputItemTypeEnum._(r'function_call');
  static const webSearchCall = OutputItemTypeEnum._(r'web_search_call');
  static const computerCall = OutputItemTypeEnum._(r'computer_call');
  static const reasoning = OutputItemTypeEnum._(r'reasoning');
  static const imageGenerationCall = OutputItemTypeEnum._(r'image_generation_call');
  static const codeInterpreterCall = OutputItemTypeEnum._(r'code_interpreter_call');
  static const localShellCall = OutputItemTypeEnum._(r'local_shell_call');
  static const mcpCall = OutputItemTypeEnum._(r'mcp_call');
  static const mcpListTools = OutputItemTypeEnum._(r'mcp_list_tools');
  static const mcpApprovalRequest = OutputItemTypeEnum._(r'mcp_approval_request');

  /// List of all possible values in this [enum][OutputItemTypeEnum].
  static const values = <OutputItemTypeEnum>[
    message,
    fileSearchCall,
    functionCall,
    webSearchCall,
    computerCall,
    reasoning,
    imageGenerationCall,
    codeInterpreterCall,
    localShellCall,
    mcpCall,
    mcpListTools,
    mcpApprovalRequest,
  ];

  static OutputItemTypeEnum? fromJson(dynamic value) => OutputItemTypeEnumTypeTransformer().decode(value);

  static List<OutputItemTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <OutputItemTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = OutputItemTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [OutputItemTypeEnum] to String,
/// and [decode] dynamic data back to [OutputItemTypeEnum].
class OutputItemTypeEnumTypeTransformer {
  factory OutputItemTypeEnumTypeTransformer() => _instance ??= const OutputItemTypeEnumTypeTransformer._();

  const OutputItemTypeEnumTypeTransformer._();

  String encode(OutputItemTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OutputItemTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OutputItemTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'message': return OutputItemTypeEnum.message;
        case r'file_search_call': return OutputItemTypeEnum.fileSearchCall;
        case r'function_call': return OutputItemTypeEnum.functionCall;
        case r'web_search_call': return OutputItemTypeEnum.webSearchCall;
        case r'computer_call': return OutputItemTypeEnum.computerCall;
        case r'reasoning': return OutputItemTypeEnum.reasoning;
        case r'image_generation_call': return OutputItemTypeEnum.imageGenerationCall;
        case r'code_interpreter_call': return OutputItemTypeEnum.codeInterpreterCall;
        case r'local_shell_call': return OutputItemTypeEnum.localShellCall;
        case r'mcp_call': return OutputItemTypeEnum.mcpCall;
        case r'mcp_list_tools': return OutputItemTypeEnum.mcpListTools;
        case r'mcp_approval_request': return OutputItemTypeEnum.mcpApprovalRequest;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [OutputItemTypeEnumTypeTransformer] instance.
  static OutputItemTypeEnumTypeTransformer? _instance;
}


/// The role of the output message. Always `assistant`. 
class OutputItemRoleEnum {
  /// Instantiate a new enum with the provided [value].
  const OutputItemRoleEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const assistant = OutputItemRoleEnum._(r'assistant');

  /// List of all possible values in this [enum][OutputItemRoleEnum].
  static const values = <OutputItemRoleEnum>[
    assistant,
  ];

  static OutputItemRoleEnum? fromJson(dynamic value) => OutputItemRoleEnumTypeTransformer().decode(value);

  static List<OutputItemRoleEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <OutputItemRoleEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = OutputItemRoleEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [OutputItemRoleEnum] to String,
/// and [decode] dynamic data back to [OutputItemRoleEnum].
class OutputItemRoleEnumTypeTransformer {
  factory OutputItemRoleEnumTypeTransformer() => _instance ??= const OutputItemRoleEnumTypeTransformer._();

  const OutputItemRoleEnumTypeTransformer._();

  String encode(OutputItemRoleEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OutputItemRoleEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OutputItemRoleEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'assistant': return OutputItemRoleEnum.assistant;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [OutputItemRoleEnumTypeTransformer] instance.
  static OutputItemRoleEnumTypeTransformer? _instance;
}


/// The status of the local shell call. 
class OutputItemStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const OutputItemStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const inProgress = OutputItemStatusEnum._(r'in_progress');
  static const completed = OutputItemStatusEnum._(r'completed');
  static const incomplete = OutputItemStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][OutputItemStatusEnum].
  static const values = <OutputItemStatusEnum>[
    inProgress,
    completed,
    incomplete,
  ];

  static OutputItemStatusEnum? fromJson(dynamic value) => OutputItemStatusEnumTypeTransformer().decode(value);

  static List<OutputItemStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <OutputItemStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = OutputItemStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [OutputItemStatusEnum] to String,
/// and [decode] dynamic data back to [OutputItemStatusEnum].
class OutputItemStatusEnumTypeTransformer {
  factory OutputItemStatusEnumTypeTransformer() => _instance ??= const OutputItemStatusEnumTypeTransformer._();

  const OutputItemStatusEnumTypeTransformer._();

  String encode(OutputItemStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OutputItemStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OutputItemStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'in_progress': return OutputItemStatusEnum.inProgress;
        case r'completed': return OutputItemStatusEnum.completed;
        case r'incomplete': return OutputItemStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [OutputItemStatusEnumTypeTransformer] instance.
  static OutputItemStatusEnumTypeTransformer? _instance;
}


