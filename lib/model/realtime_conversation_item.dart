//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class RealtimeConversationItem {
  /// Returns a new [RealtimeConversationItem] instance.
  RealtimeConversationItem({
    this.id,
    this.type,
    this.object,
    this.status,
    this.role,
    this.content = const [],
    this.callId,
    this.name,
    this.arguments,
    this.output,
  });

  /// The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  /// The type of the item (`message`, `function_call`, `function_call_output`). 
  RealtimeConversationItemTypeEnum? type;

  /// Identifier for the API object being returned - always `realtime.item`. 
  RealtimeConversationItemObjectEnum? object;

  /// The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
  RealtimeConversationItemStatusEnum? status;

  /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
  RealtimeConversationItemRoleEnum? role;

  /// The content of the message, applicable for `message` items.  - Message items of role `system` support only `input_text` content - Message items of role `user` support `input_text` and `input_audio`    content - Message items of role `assistant` support `text` content. 
  List<RealtimeConversationItemContentInner> content;

  /// The ID of the function call (for `function_call` and  `function_call_output` items). If passed on a `function_call_output`  item, the server will check that a `function_call` item with the same  ID exists in the conversation history. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? callId;

  /// The name of the function being called (for `function_call` items). 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? name;

  /// The arguments of the function call (for `function_call` items). 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? arguments;

  /// The output of the function call (for `function_call_output` items). 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? output;

  @override
  bool operator ==(Object other) => identical(this, other) || other is RealtimeConversationItem &&
    other.id == id &&
    other.type == type &&
    other.object == object &&
    other.status == status &&
    other.role == role &&
    _deepEquality.equals(other.content, content) &&
    other.callId == callId &&
    other.name == name &&
    other.arguments == arguments &&
    other.output == output;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (type == null ? 0 : type!.hashCode) +
    (object == null ? 0 : object!.hashCode) +
    (status == null ? 0 : status!.hashCode) +
    (role == null ? 0 : role!.hashCode) +
    (content.hashCode) +
    (callId == null ? 0 : callId!.hashCode) +
    (name == null ? 0 : name!.hashCode) +
    (arguments == null ? 0 : arguments!.hashCode) +
    (output == null ? 0 : output!.hashCode);

  @override
  String toString() => 'RealtimeConversationItem[id=$id, type=$type, object=$object, status=$status, role=$role, content=$content, callId=$callId, name=$name, arguments=$arguments, output=$output]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.type != null) {
      json[r'type'] = this.type;
    } else {
      json[r'type'] = null;
    }
    if (this.object != null) {
      json[r'object'] = this.object;
    } else {
      json[r'object'] = null;
    }
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    if (this.role != null) {
      json[r'role'] = this.role;
    } else {
      json[r'role'] = null;
    }
      json[r'content'] = this.content;
    if (this.callId != null) {
      json[r'call_id'] = this.callId;
    } else {
      json[r'call_id'] = null;
    }
    if (this.name != null) {
      json[r'name'] = this.name;
    } else {
      json[r'name'] = null;
    }
    if (this.arguments != null) {
      json[r'arguments'] = this.arguments;
    } else {
      json[r'arguments'] = null;
    }
    if (this.output != null) {
      json[r'output'] = this.output;
    } else {
      json[r'output'] = null;
    }
    return json;
  }

  /// Returns a new [RealtimeConversationItem] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static RealtimeConversationItem? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "RealtimeConversationItem[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "RealtimeConversationItem[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return RealtimeConversationItem(
        id: mapValueOfType<String>(json, r'id'),
        type: RealtimeConversationItemTypeEnum.fromJson(json[r'type']),
        object: RealtimeConversationItemObjectEnum.fromJson(json[r'object']),
        status: RealtimeConversationItemStatusEnum.fromJson(json[r'status']),
        role: RealtimeConversationItemRoleEnum.fromJson(json[r'role']),
        content: RealtimeConversationItemContentInner.listFromJson(json[r'content']),
        callId: mapValueOfType<String>(json, r'call_id'),
        name: mapValueOfType<String>(json, r'name'),
        arguments: mapValueOfType<String>(json, r'arguments'),
        output: mapValueOfType<String>(json, r'output'),
      );
    }
    return null;
  }

  static List<RealtimeConversationItem> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeConversationItem>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeConversationItem.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, RealtimeConversationItem> mapFromJson(dynamic json) {
    final map = <String, RealtimeConversationItem>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = RealtimeConversationItem.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of RealtimeConversationItem-objects as value to a dart map
  static Map<String, List<RealtimeConversationItem>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<RealtimeConversationItem>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = RealtimeConversationItem.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

/// The type of the item (`message`, `function_call`, `function_call_output`). 
class RealtimeConversationItemTypeEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeConversationItemTypeEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const message = RealtimeConversationItemTypeEnum._(r'message');
  static const functionCall = RealtimeConversationItemTypeEnum._(r'function_call');
  static const functionCallOutput = RealtimeConversationItemTypeEnum._(r'function_call_output');

  /// List of all possible values in this [enum][RealtimeConversationItemTypeEnum].
  static const values = <RealtimeConversationItemTypeEnum>[
    message,
    functionCall,
    functionCallOutput,
  ];

  static RealtimeConversationItemTypeEnum? fromJson(dynamic value) => RealtimeConversationItemTypeEnumTypeTransformer().decode(value);

  static List<RealtimeConversationItemTypeEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeConversationItemTypeEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeConversationItemTypeEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeConversationItemTypeEnum] to String,
/// and [decode] dynamic data back to [RealtimeConversationItemTypeEnum].
class RealtimeConversationItemTypeEnumTypeTransformer {
  factory RealtimeConversationItemTypeEnumTypeTransformer() => _instance ??= const RealtimeConversationItemTypeEnumTypeTransformer._();

  const RealtimeConversationItemTypeEnumTypeTransformer._();

  String encode(RealtimeConversationItemTypeEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeConversationItemTypeEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeConversationItemTypeEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'message': return RealtimeConversationItemTypeEnum.message;
        case r'function_call': return RealtimeConversationItemTypeEnum.functionCall;
        case r'function_call_output': return RealtimeConversationItemTypeEnum.functionCallOutput;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeConversationItemTypeEnumTypeTransformer] instance.
  static RealtimeConversationItemTypeEnumTypeTransformer? _instance;
}


/// Identifier for the API object being returned - always `realtime.item`. 
class RealtimeConversationItemObjectEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeConversationItemObjectEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const realtimePeriodItem = RealtimeConversationItemObjectEnum._(r'realtime.item');

  /// List of all possible values in this [enum][RealtimeConversationItemObjectEnum].
  static const values = <RealtimeConversationItemObjectEnum>[
    realtimePeriodItem,
  ];

  static RealtimeConversationItemObjectEnum? fromJson(dynamic value) => RealtimeConversationItemObjectEnumTypeTransformer().decode(value);

  static List<RealtimeConversationItemObjectEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeConversationItemObjectEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeConversationItemObjectEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeConversationItemObjectEnum] to String,
/// and [decode] dynamic data back to [RealtimeConversationItemObjectEnum].
class RealtimeConversationItemObjectEnumTypeTransformer {
  factory RealtimeConversationItemObjectEnumTypeTransformer() => _instance ??= const RealtimeConversationItemObjectEnumTypeTransformer._();

  const RealtimeConversationItemObjectEnumTypeTransformer._();

  String encode(RealtimeConversationItemObjectEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeConversationItemObjectEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeConversationItemObjectEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'realtime.item': return RealtimeConversationItemObjectEnum.realtimePeriodItem;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeConversationItemObjectEnumTypeTransformer] instance.
  static RealtimeConversationItemObjectEnumTypeTransformer? _instance;
}


/// The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
class RealtimeConversationItemStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeConversationItemStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const completed = RealtimeConversationItemStatusEnum._(r'completed');
  static const incomplete = RealtimeConversationItemStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][RealtimeConversationItemStatusEnum].
  static const values = <RealtimeConversationItemStatusEnum>[
    completed,
    incomplete,
  ];

  static RealtimeConversationItemStatusEnum? fromJson(dynamic value) => RealtimeConversationItemStatusEnumTypeTransformer().decode(value);

  static List<RealtimeConversationItemStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeConversationItemStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeConversationItemStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeConversationItemStatusEnum] to String,
/// and [decode] dynamic data back to [RealtimeConversationItemStatusEnum].
class RealtimeConversationItemStatusEnumTypeTransformer {
  factory RealtimeConversationItemStatusEnumTypeTransformer() => _instance ??= const RealtimeConversationItemStatusEnumTypeTransformer._();

  const RealtimeConversationItemStatusEnumTypeTransformer._();

  String encode(RealtimeConversationItemStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeConversationItemStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeConversationItemStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'completed': return RealtimeConversationItemStatusEnum.completed;
        case r'incomplete': return RealtimeConversationItemStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeConversationItemStatusEnumTypeTransformer] instance.
  static RealtimeConversationItemStatusEnumTypeTransformer? _instance;
}


/// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
class RealtimeConversationItemRoleEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeConversationItemRoleEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const user = RealtimeConversationItemRoleEnum._(r'user');
  static const assistant = RealtimeConversationItemRoleEnum._(r'assistant');
  static const system = RealtimeConversationItemRoleEnum._(r'system');

  /// List of all possible values in this [enum][RealtimeConversationItemRoleEnum].
  static const values = <RealtimeConversationItemRoleEnum>[
    user,
    assistant,
    system,
  ];

  static RealtimeConversationItemRoleEnum? fromJson(dynamic value) => RealtimeConversationItemRoleEnumTypeTransformer().decode(value);

  static List<RealtimeConversationItemRoleEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeConversationItemRoleEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeConversationItemRoleEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeConversationItemRoleEnum] to String,
/// and [decode] dynamic data back to [RealtimeConversationItemRoleEnum].
class RealtimeConversationItemRoleEnumTypeTransformer {
  factory RealtimeConversationItemRoleEnumTypeTransformer() => _instance ??= const RealtimeConversationItemRoleEnumTypeTransformer._();

  const RealtimeConversationItemRoleEnumTypeTransformer._();

  String encode(RealtimeConversationItemRoleEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeConversationItemRoleEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeConversationItemRoleEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'user': return RealtimeConversationItemRoleEnum.user;
        case r'assistant': return RealtimeConversationItemRoleEnum.assistant;
        case r'system': return RealtimeConversationItemRoleEnum.system;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeConversationItemRoleEnumTypeTransformer] instance.
  static RealtimeConversationItemRoleEnumTypeTransformer? _instance;
}


