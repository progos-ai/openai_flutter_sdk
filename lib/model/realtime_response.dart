//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class RealtimeResponse {
  /// Returns a new [RealtimeResponse] instance.
  RealtimeResponse({
    this.id,
    this.object,
    this.status,
    this.statusDetails,
    this.output = const [],
    this.metadata = const {},
    this.usage,
    this.conversationId,
    this.voice,
    this.modalities = const [],
    this.outputAudioFormat,
    this.temperature,
    this.maxOutputTokens,
  });

  /// The unique ID of the response.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? id;

  /// The object type, must be `realtime.response`.
  RealtimeResponseObjectEnum? object;

  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  RealtimeResponseStatusEnum? status;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  RealtimeResponseStatusDetails? statusDetails;

  /// The list of output items generated by the response.
  List<RealtimeConversationItem> output;

  /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
  Map<String, String> metadata;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  RealtimeResponseUsage? usage;

  /// Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? conversationId;

  /// The voice the model used to respond. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  VoiceIdsShared? voice;

  /// The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio. 
  List<ModalitiesEnum> modalities;

  /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
  RealtimeResponseOutputAudioFormatEnum? outputAudioFormat;

  /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  num? temperature;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  RealtimeResponseMaxOutputTokens? maxOutputTokens;

  @override
  bool operator ==(Object other) => identical(this, other) || other is RealtimeResponse &&
    other.id == id &&
    other.object == object &&
    other.status == status &&
    other.statusDetails == statusDetails &&
    _deepEquality.equals(other.output, output) &&
    _deepEquality.equals(other.metadata, metadata) &&
    other.usage == usage &&
    other.conversationId == conversationId &&
    other.voice == voice &&
    _deepEquality.equals(other.modalities, modalities) &&
    other.outputAudioFormat == outputAudioFormat &&
    other.temperature == temperature &&
    other.maxOutputTokens == maxOutputTokens;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (id == null ? 0 : id!.hashCode) +
    (object == null ? 0 : object!.hashCode) +
    (status == null ? 0 : status!.hashCode) +
    (statusDetails == null ? 0 : statusDetails!.hashCode) +
    (output.hashCode) +
    (metadata.hashCode) +
    (usage == null ? 0 : usage!.hashCode) +
    (conversationId == null ? 0 : conversationId!.hashCode) +
    (voice == null ? 0 : voice!.hashCode) +
    (modalities.hashCode) +
    (outputAudioFormat == null ? 0 : outputAudioFormat!.hashCode) +
    (temperature == null ? 0 : temperature!.hashCode) +
    (maxOutputTokens == null ? 0 : maxOutputTokens!.hashCode);

  @override
  String toString() => 'RealtimeResponse[id=$id, object=$object, status=$status, statusDetails=$statusDetails, output=$output, metadata=$metadata, usage=$usage, conversationId=$conversationId, voice=$voice, modalities=$modalities, outputAudioFormat=$outputAudioFormat, temperature=$temperature, maxOutputTokens=$maxOutputTokens]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.object != null) {
      json[r'object'] = this.object;
    } else {
      json[r'object'] = null;
    }
    if (this.status != null) {
      json[r'status'] = this.status;
    } else {
      json[r'status'] = null;
    }
    if (this.statusDetails != null) {
      json[r'status_details'] = this.statusDetails;
    } else {
      json[r'status_details'] = null;
    }
      json[r'output'] = this.output;
      json[r'metadata'] = this.metadata;
    if (this.usage != null) {
      json[r'usage'] = this.usage;
    } else {
      json[r'usage'] = null;
    }
    if (this.conversationId != null) {
      json[r'conversation_id'] = this.conversationId;
    } else {
      json[r'conversation_id'] = null;
    }
    if (this.voice != null) {
      json[r'voice'] = this.voice;
    } else {
      json[r'voice'] = null;
    }
      json[r'modalities'] = this.modalities;
    if (this.outputAudioFormat != null) {
      json[r'output_audio_format'] = this.outputAudioFormat;
    } else {
      json[r'output_audio_format'] = null;
    }
    if (this.temperature != null) {
      json[r'temperature'] = this.temperature;
    } else {
      json[r'temperature'] = null;
    }
    if (this.maxOutputTokens != null) {
      json[r'max_output_tokens'] = this.maxOutputTokens;
    } else {
      json[r'max_output_tokens'] = null;
    }
    return json;
  }

  /// Returns a new [RealtimeResponse] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static RealtimeResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "RealtimeResponse[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "RealtimeResponse[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return RealtimeResponse(
        id: mapValueOfType<String>(json, r'id'),
        object: RealtimeResponseObjectEnum.fromJson(json[r'object']),
        status: RealtimeResponseStatusEnum.fromJson(json[r'status']),
        statusDetails: RealtimeResponseStatusDetails.fromJson(json[r'status_details']),
        output: RealtimeConversationItem.listFromJson(json[r'output']),
        metadata: mapCastOfType<String, String>(json, r'metadata') ?? const {},
        usage: RealtimeResponseUsage.fromJson(json[r'usage']),
        conversationId: mapValueOfType<String>(json, r'conversation_id'),
        voice: VoiceIdsShared.fromJson(json[r'voice']),
        modalities: RealtimeResponseCreateParamsModalitiesEnum.listFromJson(json[r'modalities']),
        outputAudioFormat: RealtimeResponseOutputAudioFormatEnum.fromJson(json[r'output_audio_format']),
        temperature: num.parse('${json[r'temperature']}'),
        maxOutputTokens: RealtimeResponseMaxOutputTokens.fromJson(json[r'max_output_tokens']),
      );
    }
    return null;
  }

  static List<RealtimeResponse> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, RealtimeResponse> mapFromJson(dynamic json) {
    final map = <String, RealtimeResponse>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = RealtimeResponse.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of RealtimeResponse-objects as value to a dart map
  static Map<String, List<RealtimeResponse>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<RealtimeResponse>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = RealtimeResponse.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

/// The object type, must be `realtime.response`.
class RealtimeResponseObjectEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeResponseObjectEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const realtimePeriodResponse = RealtimeResponseObjectEnum._(r'realtime.response');

  /// List of all possible values in this [enum][RealtimeResponseObjectEnum].
  static const values = <RealtimeResponseObjectEnum>[
    realtimePeriodResponse,
  ];

  static RealtimeResponseObjectEnum? fromJson(dynamic value) => RealtimeResponseObjectEnumTypeTransformer().decode(value);

  static List<RealtimeResponseObjectEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeResponseObjectEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeResponseObjectEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeResponseObjectEnum] to String,
/// and [decode] dynamic data back to [RealtimeResponseObjectEnum].
class RealtimeResponseObjectEnumTypeTransformer {
  factory RealtimeResponseObjectEnumTypeTransformer() => _instance ??= const RealtimeResponseObjectEnumTypeTransformer._();

  const RealtimeResponseObjectEnumTypeTransformer._();

  String encode(RealtimeResponseObjectEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeResponseObjectEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeResponseObjectEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'realtime.response': return RealtimeResponseObjectEnum.realtimePeriodResponse;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeResponseObjectEnumTypeTransformer] instance.
  static RealtimeResponseObjectEnumTypeTransformer? _instance;
}


/// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
class RealtimeResponseStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeResponseStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const completed = RealtimeResponseStatusEnum._(r'completed');
  static const cancelled = RealtimeResponseStatusEnum._(r'cancelled');
  static const failed = RealtimeResponseStatusEnum._(r'failed');
  static const incomplete = RealtimeResponseStatusEnum._(r'incomplete');

  /// List of all possible values in this [enum][RealtimeResponseStatusEnum].
  static const values = <RealtimeResponseStatusEnum>[
    completed,
    cancelled,
    failed,
    incomplete,
  ];

  static RealtimeResponseStatusEnum? fromJson(dynamic value) => RealtimeResponseStatusEnumTypeTransformer().decode(value);

  static List<RealtimeResponseStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeResponseStatusEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeResponseStatusEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeResponseStatusEnum] to String,
/// and [decode] dynamic data back to [RealtimeResponseStatusEnum].
class RealtimeResponseStatusEnumTypeTransformer {
  factory RealtimeResponseStatusEnumTypeTransformer() => _instance ??= const RealtimeResponseStatusEnumTypeTransformer._();

  const RealtimeResponseStatusEnumTypeTransformer._();

  String encode(RealtimeResponseStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeResponseStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeResponseStatusEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'completed': return RealtimeResponseStatusEnum.completed;
        case r'cancelled': return RealtimeResponseStatusEnum.cancelled;
        case r'failed': return RealtimeResponseStatusEnum.failed;
        case r'incomplete': return RealtimeResponseStatusEnum.incomplete;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeResponseStatusEnumTypeTransformer] instance.
  static RealtimeResponseStatusEnumTypeTransformer? _instance;
}



class RealtimeResponseCreateParamsModalitiesEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeResponseCreateParamsModalitiesEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const text = RealtimeResponseCreateParamsModalitiesEnum._(r'text');
  static const audio = RealtimeResponseCreateParamsModalitiesEnum._(r'audio');

  /// List of all possible values in this [enum][RealtimeResponseCreateParamsModalitiesEnum].
  static const values = <RealtimeResponseCreateParamsModalitiesEnum>[
    text,
    audio,
  ];

  static RealtimeResponseCreateParamsModalitiesEnum? fromJson(dynamic value) => RealtimeResponseCreateParamsModalitiesEnumTypeTransformer().decode(value);

  static List<RealtimeResponseCreateParamsModalitiesEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeResponseCreateParamsModalitiesEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeResponseCreateParamsModalitiesEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeResponseCreateParamsModalitiesEnum] to String,
/// and [decode] dynamic data back to [RealtimeResponseCreateParamsModalitiesEnum].
class RealtimeResponseCreateParamsModalitiesEnumTypeTransformer {
  factory RealtimeResponseCreateParamsModalitiesEnumTypeTransformer() => _instance ??= const RealtimeResponseCreateParamsModalitiesEnumTypeTransformer._();

  const RealtimeResponseCreateParamsModalitiesEnumTypeTransformer._();

  String encode(RealtimeResponseCreateParamsModalitiesEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeResponseCreateParamsModalitiesEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeResponseCreateParamsModalitiesEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'text': return RealtimeResponseCreateParamsModalitiesEnum.text;
        case r'audio': return RealtimeResponseCreateParamsModalitiesEnum.audio;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeResponseCreateParamsModalitiesEnumTypeTransformer] instance.
  static RealtimeResponseCreateParamsModalitiesEnumTypeTransformer? _instance;
}


/// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
class RealtimeResponseOutputAudioFormatEnum {
  /// Instantiate a new enum with the provided [value].
  const RealtimeResponseOutputAudioFormatEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const pcm16 = RealtimeResponseOutputAudioFormatEnum._(r'pcm16');
  static const g711Ulaw = RealtimeResponseOutputAudioFormatEnum._(r'g711_ulaw');
  static const g711Alaw = RealtimeResponseOutputAudioFormatEnum._(r'g711_alaw');

  /// List of all possible values in this [enum][RealtimeResponseOutputAudioFormatEnum].
  static const values = <RealtimeResponseOutputAudioFormatEnum>[
    pcm16,
    g711Ulaw,
    g711Alaw,
  ];

  static RealtimeResponseOutputAudioFormatEnum? fromJson(dynamic value) => RealtimeResponseOutputAudioFormatEnumTypeTransformer().decode(value);

  static List<RealtimeResponseOutputAudioFormatEnum> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <RealtimeResponseOutputAudioFormatEnum>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RealtimeResponseOutputAudioFormatEnum.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }
}

/// Transformation class that can [encode] an instance of [RealtimeResponseOutputAudioFormatEnum] to String,
/// and [decode] dynamic data back to [RealtimeResponseOutputAudioFormatEnum].
class RealtimeResponseOutputAudioFormatEnumTypeTransformer {
  factory RealtimeResponseOutputAudioFormatEnumTypeTransformer() => _instance ??= const RealtimeResponseOutputAudioFormatEnumTypeTransformer._();

  const RealtimeResponseOutputAudioFormatEnumTypeTransformer._();

  String encode(RealtimeResponseOutputAudioFormatEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a RealtimeResponseOutputAudioFormatEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  RealtimeResponseOutputAudioFormatEnum? decode(dynamic data, {bool allowNull = true}) {
    if (data != null) {
      switch (data) {
        case r'pcm16': return RealtimeResponseOutputAudioFormatEnum.pcm16;
        case r'g711_ulaw': return RealtimeResponseOutputAudioFormatEnum.g711Ulaw;
        case r'g711_alaw': return RealtimeResponseOutputAudioFormatEnum.g711Alaw;
        default:
          if (!allowNull) {
            throw ArgumentError('Unknown enum value to decode: $data');
          }
      }
    }
    return null;
  }

  /// Singleton [RealtimeResponseOutputAudioFormatEnumTypeTransformer] instance.
  static RealtimeResponseOutputAudioFormatEnumTypeTransformer? _instance;
}


