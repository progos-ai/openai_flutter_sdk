//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'chat_completion_response_message_audio.g.dart';

/// If the audio output modality is requested, this object contains data about the audio response from the model. [Learn more](/docs/guides/audio). 
///
/// Properties:
/// * [id] - Unique identifier for this audio response.
/// * [expiresAt] - The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations. 
/// * [data] - Base64 encoded audio bytes generated by the model, in the format specified in the request. 
/// * [transcript] - Transcript of the audio generated by the model.
@BuiltValue()
abstract class ChatCompletionResponseMessageAudio implements Built<ChatCompletionResponseMessageAudio, ChatCompletionResponseMessageAudioBuilder> {
  /// Unique identifier for this audio response.
  @BuiltValueField(wireName: r'id')
  String get id;

  /// The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations. 
  @BuiltValueField(wireName: r'expires_at')
  int get expiresAt;

  /// Base64 encoded audio bytes generated by the model, in the format specified in the request. 
  @BuiltValueField(wireName: r'data')
  String get data;

  /// Transcript of the audio generated by the model.
  @BuiltValueField(wireName: r'transcript')
  String get transcript;

  ChatCompletionResponseMessageAudio._();

  factory ChatCompletionResponseMessageAudio([void updates(ChatCompletionResponseMessageAudioBuilder b)]) = _$ChatCompletionResponseMessageAudio;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(ChatCompletionResponseMessageAudioBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<ChatCompletionResponseMessageAudio> get serializer => _$ChatCompletionResponseMessageAudioSerializer();
}

class _$ChatCompletionResponseMessageAudioSerializer implements PrimitiveSerializer<ChatCompletionResponseMessageAudio> {
  @override
  final Iterable<Type> types = const [ChatCompletionResponseMessageAudio, _$ChatCompletionResponseMessageAudio];

  @override
  final String wireName = r'ChatCompletionResponseMessageAudio';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    ChatCompletionResponseMessageAudio object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'id';
    yield serializers.serialize(
      object.id,
      specifiedType: const FullType(String),
    );
    yield r'expires_at';
    yield serializers.serialize(
      object.expiresAt,
      specifiedType: const FullType(int),
    );
    yield r'data';
    yield serializers.serialize(
      object.data,
      specifiedType: const FullType(String),
    );
    yield r'transcript';
    yield serializers.serialize(
      object.transcript,
      specifiedType: const FullType(String),
    );
  }

  @override
  Object serialize(
    Serializers serializers,
    ChatCompletionResponseMessageAudio object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required ChatCompletionResponseMessageAudioBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'expires_at':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.expiresAt = valueDes;
          break;
        case r'data':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.data = valueDes;
          break;
        case r'transcript':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.transcript = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  ChatCompletionResponseMessageAudio deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = ChatCompletionResponseMessageAudioBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

