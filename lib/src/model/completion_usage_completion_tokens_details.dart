//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'completion_usage_completion_tokens_details.g.dart';

/// Breakdown of tokens used in a completion.
///
/// Properties:
/// * [acceptedPredictionTokens] - When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. 
/// * [audioTokens] - Audio input tokens generated by the model.
/// * [reasoningTokens] - Tokens generated by the model for reasoning.
/// * [rejectedPredictionTokens] - When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits. 
@BuiltValue()
abstract class CompletionUsageCompletionTokensDetails implements Built<CompletionUsageCompletionTokensDetails, CompletionUsageCompletionTokensDetailsBuilder> {
  /// When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. 
  @BuiltValueField(wireName: r'accepted_prediction_tokens')
  int? get acceptedPredictionTokens;

  /// Audio input tokens generated by the model.
  @BuiltValueField(wireName: r'audio_tokens')
  int? get audioTokens;

  /// Tokens generated by the model for reasoning.
  @BuiltValueField(wireName: r'reasoning_tokens')
  int? get reasoningTokens;

  /// When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits. 
  @BuiltValueField(wireName: r'rejected_prediction_tokens')
  int? get rejectedPredictionTokens;

  CompletionUsageCompletionTokensDetails._();

  factory CompletionUsageCompletionTokensDetails([void updates(CompletionUsageCompletionTokensDetailsBuilder b)]) = _$CompletionUsageCompletionTokensDetails;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(CompletionUsageCompletionTokensDetailsBuilder b) => b
      ..acceptedPredictionTokens = 0
      ..audioTokens = 0
      ..reasoningTokens = 0
      ..rejectedPredictionTokens = 0;

  @BuiltValueSerializer(custom: true)
  static Serializer<CompletionUsageCompletionTokensDetails> get serializer => _$CompletionUsageCompletionTokensDetailsSerializer();
}

class _$CompletionUsageCompletionTokensDetailsSerializer implements PrimitiveSerializer<CompletionUsageCompletionTokensDetails> {
  @override
  final Iterable<Type> types = const [CompletionUsageCompletionTokensDetails, _$CompletionUsageCompletionTokensDetails];

  @override
  final String wireName = r'CompletionUsageCompletionTokensDetails';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    CompletionUsageCompletionTokensDetails object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.acceptedPredictionTokens != null) {
      yield r'accepted_prediction_tokens';
      yield serializers.serialize(
        object.acceptedPredictionTokens,
        specifiedType: const FullType(int),
      );
    }
    if (object.audioTokens != null) {
      yield r'audio_tokens';
      yield serializers.serialize(
        object.audioTokens,
        specifiedType: const FullType(int),
      );
    }
    if (object.reasoningTokens != null) {
      yield r'reasoning_tokens';
      yield serializers.serialize(
        object.reasoningTokens,
        specifiedType: const FullType(int),
      );
    }
    if (object.rejectedPredictionTokens != null) {
      yield r'rejected_prediction_tokens';
      yield serializers.serialize(
        object.rejectedPredictionTokens,
        specifiedType: const FullType(int),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    CompletionUsageCompletionTokensDetails object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required CompletionUsageCompletionTokensDetailsBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'accepted_prediction_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.acceptedPredictionTokens = valueDes;
          break;
        case r'audio_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.audioTokens = valueDes;
          break;
        case r'reasoning_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.reasoningTokens = valueDes;
          break;
        case r'rejected_prediction_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.rejectedPredictionTokens = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  CompletionUsageCompletionTokensDetails deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = CompletionUsageCompletionTokensDetailsBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

