//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_collection/built_collection.dart';
import 'package:openai_flutter_sdk/src/model/create_image_request_model.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'create_image_request.g.dart';

/// CreateImageRequest
///
/// Properties:
/// * [prompt] - A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
/// * [model] 
/// * [n] - The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
/// * [quality] - The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
/// * [responseFormat] - The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
/// * [outputFormat] - The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
/// * [outputCompression] - The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
/// * [size] - The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
/// * [moderation] - Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
/// * [background] - Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
/// * [style] - The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
/// * [user] - A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). 
@BuiltValue()
abstract class CreateImageRequest implements Built<CreateImageRequest, CreateImageRequestBuilder> {
  /// A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
  @BuiltValueField(wireName: r'prompt')
  String get prompt;

  @BuiltValueField(wireName: r'model')
  CreateImageRequestModel? get model;

  /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
  @BuiltValueField(wireName: r'n')
  int? get n;

  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueField(wireName: r'quality')
  CreateImageRequestQualityEnum? get quality;
  // enum qualityEnum {  standard,  hd,  low,  medium,  high,  auto,  };

  /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
  @BuiltValueField(wireName: r'response_format')
  CreateImageRequestResponseFormatEnum? get responseFormat;
  // enum responseFormatEnum {  url,  b64_json,  };

  /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
  @BuiltValueField(wireName: r'output_format')
  CreateImageRequestOutputFormatEnum? get outputFormat;
  // enum outputFormatEnum {  png,  jpeg,  webp,  };

  /// The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
  @BuiltValueField(wireName: r'output_compression')
  int? get outputCompression;

  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueField(wireName: r'size')
  CreateImageRequestSizeEnum? get size;
  // enum sizeEnum {  auto,  1024x1024,  1536x1024,  1024x1536,  256x256,  512x512,  1792x1024,  1024x1792,  };

  /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
  @BuiltValueField(wireName: r'moderation')
  CreateImageRequestModerationEnum? get moderation;
  // enum moderationEnum {  low,  auto,  };

  /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
  @BuiltValueField(wireName: r'background')
  CreateImageRequestBackgroundEnum? get background;
  // enum backgroundEnum {  transparent,  opaque,  auto,  };

  /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
  @BuiltValueField(wireName: r'style')
  CreateImageRequestStyleEnum? get style;
  // enum styleEnum {  vivid,  natural,  };

  /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). 
  @BuiltValueField(wireName: r'user')
  String? get user;

  CreateImageRequest._();

  factory CreateImageRequest([void updates(CreateImageRequestBuilder b)]) = _$CreateImageRequest;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(CreateImageRequestBuilder b) => b
      ..n = 1
      ..quality = const CreateImageRequestQualityEnum._('auto')
      ..responseFormat = const CreateImageRequestResponseFormatEnum._('url')
      ..outputFormat = const CreateImageRequestOutputFormatEnum._('png')
      ..outputCompression = 100
      ..size = const CreateImageRequestSizeEnum._('auto')
      ..moderation = const CreateImageRequestModerationEnum._('auto')
      ..background = const CreateImageRequestBackgroundEnum._('auto')
      ..style = const CreateImageRequestStyleEnum._('vivid');

  @BuiltValueSerializer(custom: true)
  static Serializer<CreateImageRequest> get serializer => _$CreateImageRequestSerializer();
}

class _$CreateImageRequestSerializer implements PrimitiveSerializer<CreateImageRequest> {
  @override
  final Iterable<Type> types = const [CreateImageRequest, _$CreateImageRequest];

  @override
  final String wireName = r'CreateImageRequest';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    CreateImageRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'prompt';
    yield serializers.serialize(
      object.prompt,
      specifiedType: const FullType(String),
    );
    if (object.model != null) {
      yield r'model';
      yield serializers.serialize(
        object.model,
        specifiedType: const FullType(CreateImageRequestModel),
      );
    }
    if (object.n != null) {
      yield r'n';
      yield serializers.serialize(
        object.n,
        specifiedType: const FullType(int),
      );
    }
    if (object.quality != null) {
      yield r'quality';
      yield serializers.serialize(
        object.quality,
        specifiedType: const FullType(CreateImageRequestQualityEnum),
      );
    }
    if (object.responseFormat != null) {
      yield r'response_format';
      yield serializers.serialize(
        object.responseFormat,
        specifiedType: const FullType(CreateImageRequestResponseFormatEnum),
      );
    }
    if (object.outputFormat != null) {
      yield r'output_format';
      yield serializers.serialize(
        object.outputFormat,
        specifiedType: const FullType(CreateImageRequestOutputFormatEnum),
      );
    }
    if (object.outputCompression != null) {
      yield r'output_compression';
      yield serializers.serialize(
        object.outputCompression,
        specifiedType: const FullType(int),
      );
    }
    if (object.size != null) {
      yield r'size';
      yield serializers.serialize(
        object.size,
        specifiedType: const FullType(CreateImageRequestSizeEnum),
      );
    }
    if (object.moderation != null) {
      yield r'moderation';
      yield serializers.serialize(
        object.moderation,
        specifiedType: const FullType(CreateImageRequestModerationEnum),
      );
    }
    if (object.background != null) {
      yield r'background';
      yield serializers.serialize(
        object.background,
        specifiedType: const FullType(CreateImageRequestBackgroundEnum),
      );
    }
    if (object.style != null) {
      yield r'style';
      yield serializers.serialize(
        object.style,
        specifiedType: const FullType(CreateImageRequestStyleEnum),
      );
    }
    if (object.user != null) {
      yield r'user';
      yield serializers.serialize(
        object.user,
        specifiedType: const FullType(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    CreateImageRequest object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required CreateImageRequestBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'prompt':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.prompt = valueDes;
          break;
        case r'model':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestModel),
          ) as CreateImageRequestModel;
          result.model.replace(valueDes);
          break;
        case r'n':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.n = valueDes;
          break;
        case r'quality':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestQualityEnum),
          ) as CreateImageRequestQualityEnum;
          result.quality = valueDes;
          break;
        case r'response_format':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestResponseFormatEnum),
          ) as CreateImageRequestResponseFormatEnum;
          result.responseFormat = valueDes;
          break;
        case r'output_format':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestOutputFormatEnum),
          ) as CreateImageRequestOutputFormatEnum;
          result.outputFormat = valueDes;
          break;
        case r'output_compression':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.outputCompression = valueDes;
          break;
        case r'size':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestSizeEnum),
          ) as CreateImageRequestSizeEnum;
          result.size = valueDes;
          break;
        case r'moderation':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestModerationEnum),
          ) as CreateImageRequestModerationEnum;
          result.moderation = valueDes;
          break;
        case r'background':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestBackgroundEnum),
          ) as CreateImageRequestBackgroundEnum;
          result.background = valueDes;
          break;
        case r'style':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(CreateImageRequestStyleEnum),
          ) as CreateImageRequestStyleEnum;
          result.style = valueDes;
          break;
        case r'user':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.user = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  CreateImageRequest deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = CreateImageRequestBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class CreateImageRequestQualityEnum extends EnumClass {

  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'standard')
  static const CreateImageRequestQualityEnum standard = _$createImageRequestQualityEnum_standard;
  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'hd')
  static const CreateImageRequestQualityEnum hd = _$createImageRequestQualityEnum_hd;
  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'low')
  static const CreateImageRequestQualityEnum low = _$createImageRequestQualityEnum_low;
  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'medium')
  static const CreateImageRequestQualityEnum medium = _$createImageRequestQualityEnum_medium;
  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'high')
  static const CreateImageRequestQualityEnum high = _$createImageRequestQualityEnum_high;
  /// The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
  @BuiltValueEnumConst(wireName: r'auto')
  static const CreateImageRequestQualityEnum auto = _$createImageRequestQualityEnum_auto;

  static Serializer<CreateImageRequestQualityEnum> get serializer => _$createImageRequestQualityEnumSerializer;

  const CreateImageRequestQualityEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestQualityEnum> get values => _$createImageRequestQualityEnumValues;
  static CreateImageRequestQualityEnum valueOf(String name) => _$createImageRequestQualityEnumValueOf(name);
}

class CreateImageRequestResponseFormatEnum extends EnumClass {

  /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
  @BuiltValueEnumConst(wireName: r'url')
  static const CreateImageRequestResponseFormatEnum url = _$createImageRequestResponseFormatEnum_url;
  /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
  @BuiltValueEnumConst(wireName: r'b64_json')
  static const CreateImageRequestResponseFormatEnum b64Json = _$createImageRequestResponseFormatEnum_b64Json;

  static Serializer<CreateImageRequestResponseFormatEnum> get serializer => _$createImageRequestResponseFormatEnumSerializer;

  const CreateImageRequestResponseFormatEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestResponseFormatEnum> get values => _$createImageRequestResponseFormatEnumValues;
  static CreateImageRequestResponseFormatEnum valueOf(String name) => _$createImageRequestResponseFormatEnumValueOf(name);
}

class CreateImageRequestOutputFormatEnum extends EnumClass {

  /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
  @BuiltValueEnumConst(wireName: r'png')
  static const CreateImageRequestOutputFormatEnum png = _$createImageRequestOutputFormatEnum_png;
  /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
  @BuiltValueEnumConst(wireName: r'jpeg')
  static const CreateImageRequestOutputFormatEnum jpeg = _$createImageRequestOutputFormatEnum_jpeg;
  /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
  @BuiltValueEnumConst(wireName: r'webp')
  static const CreateImageRequestOutputFormatEnum webp = _$createImageRequestOutputFormatEnum_webp;

  static Serializer<CreateImageRequestOutputFormatEnum> get serializer => _$createImageRequestOutputFormatEnumSerializer;

  const CreateImageRequestOutputFormatEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestOutputFormatEnum> get values => _$createImageRequestOutputFormatEnumValues;
  static CreateImageRequestOutputFormatEnum valueOf(String name) => _$createImageRequestOutputFormatEnumValueOf(name);
}

class CreateImageRequestSizeEnum extends EnumClass {

  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'auto')
  static const CreateImageRequestSizeEnum auto = _$createImageRequestSizeEnum_auto;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'1024x1024')
  static const CreateImageRequestSizeEnum n1024x1024 = _$createImageRequestSizeEnum_n1024x1024;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'1536x1024')
  static const CreateImageRequestSizeEnum n1536x1024 = _$createImageRequestSizeEnum_n1536x1024;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'1024x1536')
  static const CreateImageRequestSizeEnum n1024x1536 = _$createImageRequestSizeEnum_n1024x1536;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'256x256')
  static const CreateImageRequestSizeEnum n256x256 = _$createImageRequestSizeEnum_n256x256;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'512x512')
  static const CreateImageRequestSizeEnum n512x512 = _$createImageRequestSizeEnum_n512x512;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'1792x1024')
  static const CreateImageRequestSizeEnum n1792x1024 = _$createImageRequestSizeEnum_n1792x1024;
  /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
  @BuiltValueEnumConst(wireName: r'1024x1792')
  static const CreateImageRequestSizeEnum n1024x1792 = _$createImageRequestSizeEnum_n1024x1792;

  static Serializer<CreateImageRequestSizeEnum> get serializer => _$createImageRequestSizeEnumSerializer;

  const CreateImageRequestSizeEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestSizeEnum> get values => _$createImageRequestSizeEnumValues;
  static CreateImageRequestSizeEnum valueOf(String name) => _$createImageRequestSizeEnumValueOf(name);
}

class CreateImageRequestModerationEnum extends EnumClass {

  /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
  @BuiltValueEnumConst(wireName: r'low')
  static const CreateImageRequestModerationEnum low = _$createImageRequestModerationEnum_low;
  /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
  @BuiltValueEnumConst(wireName: r'auto')
  static const CreateImageRequestModerationEnum auto = _$createImageRequestModerationEnum_auto;

  static Serializer<CreateImageRequestModerationEnum> get serializer => _$createImageRequestModerationEnumSerializer;

  const CreateImageRequestModerationEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestModerationEnum> get values => _$createImageRequestModerationEnumValues;
  static CreateImageRequestModerationEnum valueOf(String name) => _$createImageRequestModerationEnumValueOf(name);
}

class CreateImageRequestBackgroundEnum extends EnumClass {

  /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
  @BuiltValueEnumConst(wireName: r'transparent')
  static const CreateImageRequestBackgroundEnum transparent = _$createImageRequestBackgroundEnum_transparent;
  /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
  @BuiltValueEnumConst(wireName: r'opaque')
  static const CreateImageRequestBackgroundEnum opaque = _$createImageRequestBackgroundEnum_opaque;
  /// Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
  @BuiltValueEnumConst(wireName: r'auto')
  static const CreateImageRequestBackgroundEnum auto = _$createImageRequestBackgroundEnum_auto;

  static Serializer<CreateImageRequestBackgroundEnum> get serializer => _$createImageRequestBackgroundEnumSerializer;

  const CreateImageRequestBackgroundEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestBackgroundEnum> get values => _$createImageRequestBackgroundEnumValues;
  static CreateImageRequestBackgroundEnum valueOf(String name) => _$createImageRequestBackgroundEnumValueOf(name);
}

class CreateImageRequestStyleEnum extends EnumClass {

  /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
  @BuiltValueEnumConst(wireName: r'vivid')
  static const CreateImageRequestStyleEnum vivid = _$createImageRequestStyleEnum_vivid;
  /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
  @BuiltValueEnumConst(wireName: r'natural')
  static const CreateImageRequestStyleEnum natural = _$createImageRequestStyleEnum_natural;

  static Serializer<CreateImageRequestStyleEnum> get serializer => _$createImageRequestStyleEnumSerializer;

  const CreateImageRequestStyleEnum._(String name): super(name);

  static BuiltSet<CreateImageRequestStyleEnum> get values => _$createImageRequestStyleEnumValues;
  static CreateImageRequestStyleEnum valueOf(String name) => _$createImageRequestStyleEnumValueOf(name);
}

