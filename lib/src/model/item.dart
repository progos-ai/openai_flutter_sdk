//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:openai_flutter_sdk/src/model/output_message.dart';
import 'package:openai_flutter_sdk/src/model/local_shell_exec_action.dart';
import 'package:openai_flutter_sdk/src/model/code_interpreter_tool_call_outputs_inner.dart';
import 'package:openai_flutter_sdk/src/model/computer_tool_call_safety_check.dart';
import 'package:openai_flutter_sdk/src/model/computer_call_safety_check_param.dart';
import 'package:openai_flutter_sdk/src/model/mcp_list_tools_tool.dart';
import 'package:openai_flutter_sdk/src/model/code_interpreter_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/computer_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_approval_request.dart';
import 'package:openai_flutter_sdk/src/model/local_shell_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/function_call_output_item_param.dart';
import 'package:openai_flutter_sdk/src/model/file_search_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/file_search_tool_call_results_inner.dart';
import 'package:openai_flutter_sdk/src/model/mcp_approval_response.dart';
import 'package:openai_flutter_sdk/src/model/computer_call_output_item_param.dart';
import 'package:openai_flutter_sdk/src/model/output_content.dart';
import 'package:openai_flutter_sdk/src/model/input_message.dart';
import 'package:openai_flutter_sdk/src/model/local_shell_tool_call_output.dart';
import 'package:openai_flutter_sdk/src/model/web_search_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/reasoning_item_summary_inner.dart';
import 'package:openai_flutter_sdk/src/model/reasoning_item.dart';
import 'package:built_collection/built_collection.dart';
import 'package:openai_flutter_sdk/src/model/image_gen_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_list_tools.dart';
import 'package:openai_flutter_sdk/src/model/function_tool_call.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:one_of/one_of.dart';

part 'item.g.dart';

/// Content item used to generate a response. 
///
/// Properties:
/// * [type] - The type of the message input. Always set to `message`. 
/// * [role] - The role of the output message. Always `assistant`. 
/// * [status] - The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
/// * [content] - The content of the output message. 
/// * [id] - The unique ID of the tool call. 
/// * [queries] - The queries used to search for files. 
/// * [results] - The results of the file search tool call. 
/// * [callId] - The unique ID of the local shell tool call generated by the model. 
/// * [action] 
/// * [pendingSafetyChecks] - The pending safety checks for the computer call. 
/// * [output] - The output from the tool call. 
/// * [acknowledgedSafetyChecks] - The safety checks reported by the API that have been acknowledged by the developer.
/// * [name] - The name of the tool that was run. 
/// * [arguments] - A JSON string of the arguments passed to the tool. 
/// * [encryptedContent] - The encrypted content of the reasoning item - populated when a response is generated with `reasoning.encrypted_content` in the `include` parameter. 
/// * [summary] - Reasoning text contents. 
/// * [result] - The generated image encoded in base64. 
/// * [containerId] - The ID of the container used to run the code. 
/// * [code] - The code to run, or null if not available. 
/// * [outputs] - The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
/// * [serverLabel] - The label of the MCP server running the tool. 
/// * [tools] - The tools available on the server. 
/// * [error] - The error from the tool call, if any. 
/// * [approvalRequestId] - The ID of the approval request being answered. 
/// * [approve] - Whether the request was approved. 
/// * [reason] - Optional reason for the decision. 
@BuiltValue()
abstract class Item implements Built<Item, ItemBuilder> {
  /// One Of [CodeInterpreterToolCall], [ComputerCallOutputItemParam], [ComputerToolCall], [FileSearchToolCall], [FunctionCallOutputItemParam], [FunctionToolCall], [ImageGenToolCall], [InputMessage], [LocalShellToolCall], [LocalShellToolCallOutput], [MCPApprovalRequest], [MCPApprovalResponse], [MCPListTools], [MCPToolCall], [OutputMessage], [ReasoningItem], [WebSearchToolCall]
  OneOf get oneOf;

  static const String discriminatorFieldName = r'type';

  static const Map<String, Type> discriminatorMapping = {
    r'CodeInterpreterToolCall': CodeInterpreterToolCall,
    r'ComputerCallOutputItemParam': ComputerCallOutputItemParam,
    r'ComputerToolCall': ComputerToolCall,
    r'FileSearchToolCall': FileSearchToolCall,
    r'FunctionCallOutputItemParam': FunctionCallOutputItemParam,
    r'FunctionToolCall': FunctionToolCall,
    r'ImageGenToolCall': ImageGenToolCall,
    r'InputMessage': InputMessage,
    r'LocalShellToolCall': LocalShellToolCall,
    r'LocalShellToolCallOutput': LocalShellToolCallOutput,
    r'MCPApprovalRequest': MCPApprovalRequest,
    r'MCPApprovalResponse': MCPApprovalResponse,
    r'MCPListTools': MCPListTools,
    r'MCPToolCall': MCPToolCall,
    r'OutputMessage': OutputMessage,
    r'ReasoningItem': ReasoningItem,
    r'WebSearchToolCall': WebSearchToolCall,
  };

  Item._();

  factory Item([void updates(ItemBuilder b)]) = _$Item;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(ItemBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<Item> get serializer => _$ItemSerializer();
}

extension ItemDiscriminatorExt on Item {
    String? get discriminatorValue {
        if (this is CodeInterpreterToolCall) {
            return r'CodeInterpreterToolCall';
        }
        if (this is ComputerCallOutputItemParam) {
            return r'ComputerCallOutputItemParam';
        }
        if (this is ComputerToolCall) {
            return r'ComputerToolCall';
        }
        if (this is FileSearchToolCall) {
            return r'FileSearchToolCall';
        }
        if (this is FunctionCallOutputItemParam) {
            return r'FunctionCallOutputItemParam';
        }
        if (this is FunctionToolCall) {
            return r'FunctionToolCall';
        }
        if (this is ImageGenToolCall) {
            return r'ImageGenToolCall';
        }
        if (this is InputMessage) {
            return r'InputMessage';
        }
        if (this is LocalShellToolCall) {
            return r'LocalShellToolCall';
        }
        if (this is LocalShellToolCallOutput) {
            return r'LocalShellToolCallOutput';
        }
        if (this is MCPApprovalRequest) {
            return r'MCPApprovalRequest';
        }
        if (this is MCPApprovalResponse) {
            return r'MCPApprovalResponse';
        }
        if (this is MCPListTools) {
            return r'MCPListTools';
        }
        if (this is MCPToolCall) {
            return r'MCPToolCall';
        }
        if (this is OutputMessage) {
            return r'OutputMessage';
        }
        if (this is ReasoningItem) {
            return r'ReasoningItem';
        }
        if (this is WebSearchToolCall) {
            return r'WebSearchToolCall';
        }
        return null;
    }
}
extension ItemBuilderDiscriminatorExt on ItemBuilder {
    String? get discriminatorValue {
        if (this is CodeInterpreterToolCallBuilder) {
            return r'CodeInterpreterToolCall';
        }
        if (this is ComputerCallOutputItemParamBuilder) {
            return r'ComputerCallOutputItemParam';
        }
        if (this is ComputerToolCallBuilder) {
            return r'ComputerToolCall';
        }
        if (this is FileSearchToolCallBuilder) {
            return r'FileSearchToolCall';
        }
        if (this is FunctionCallOutputItemParamBuilder) {
            return r'FunctionCallOutputItemParam';
        }
        if (this is FunctionToolCallBuilder) {
            return r'FunctionToolCall';
        }
        if (this is ImageGenToolCallBuilder) {
            return r'ImageGenToolCall';
        }
        if (this is InputMessageBuilder) {
            return r'InputMessage';
        }
        if (this is LocalShellToolCallBuilder) {
            return r'LocalShellToolCall';
        }
        if (this is LocalShellToolCallOutputBuilder) {
            return r'LocalShellToolCallOutput';
        }
        if (this is MCPApprovalRequestBuilder) {
            return r'MCPApprovalRequest';
        }
        if (this is MCPApprovalResponseBuilder) {
            return r'MCPApprovalResponse';
        }
        if (this is MCPListToolsBuilder) {
            return r'MCPListTools';
        }
        if (this is MCPToolCallBuilder) {
            return r'MCPToolCall';
        }
        if (this is OutputMessageBuilder) {
            return r'OutputMessage';
        }
        if (this is ReasoningItemBuilder) {
            return r'ReasoningItem';
        }
        if (this is WebSearchToolCallBuilder) {
            return r'WebSearchToolCall';
        }
        return null;
    }
}

class _$ItemSerializer implements PrimitiveSerializer<Item> {
  @override
  final Iterable<Type> types = const [Item, _$Item];

  @override
  final String wireName = r'Item';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    Item object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
  }

  @override
  Object serialize(
    Serializers serializers,
    Item object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final oneOf = object.oneOf;
    return serializers.serialize(oneOf.value, specifiedType: FullType(oneOf.valueType))!;
  }

  @override
  Item deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = ItemBuilder();
    Object? oneOfDataSrc;
    final serializedList = (serialized as Iterable<Object?>).toList();
    final discIndex = serializedList.indexOf(Item.discriminatorFieldName) + 1;
    final discValue = serializers.deserialize(serializedList[discIndex], specifiedType: FullType(String)) as String;
    oneOfDataSrc = serialized;
    final oneOfTypes = [CodeInterpreterToolCall, ComputerCallOutputItemParam, ComputerToolCall, FileSearchToolCall, FunctionCallOutputItemParam, FunctionToolCall, ImageGenToolCall, InputMessage, LocalShellToolCall, LocalShellToolCallOutput, MCPApprovalRequest, MCPApprovalResponse, MCPListTools, MCPToolCall, OutputMessage, ReasoningItem, WebSearchToolCall, ];
    Object oneOfResult;
    Type oneOfType;
    switch (discValue) {
      case r'CodeInterpreterToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(CodeInterpreterToolCall),
        ) as CodeInterpreterToolCall;
        oneOfType = CodeInterpreterToolCall;
        break;
      case r'ComputerCallOutputItemParam':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ComputerCallOutputItemParam),
        ) as ComputerCallOutputItemParam;
        oneOfType = ComputerCallOutputItemParam;
        break;
      case r'ComputerToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ComputerToolCall),
        ) as ComputerToolCall;
        oneOfType = ComputerToolCall;
        break;
      case r'FileSearchToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FileSearchToolCall),
        ) as FileSearchToolCall;
        oneOfType = FileSearchToolCall;
        break;
      case r'FunctionCallOutputItemParam':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FunctionCallOutputItemParam),
        ) as FunctionCallOutputItemParam;
        oneOfType = FunctionCallOutputItemParam;
        break;
      case r'FunctionToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FunctionToolCall),
        ) as FunctionToolCall;
        oneOfType = FunctionToolCall;
        break;
      case r'ImageGenToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ImageGenToolCall),
        ) as ImageGenToolCall;
        oneOfType = ImageGenToolCall;
        break;
      case r'InputMessage':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(InputMessage),
        ) as InputMessage;
        oneOfType = InputMessage;
        break;
      case r'LocalShellToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(LocalShellToolCall),
        ) as LocalShellToolCall;
        oneOfType = LocalShellToolCall;
        break;
      case r'LocalShellToolCallOutput':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(LocalShellToolCallOutput),
        ) as LocalShellToolCallOutput;
        oneOfType = LocalShellToolCallOutput;
        break;
      case r'MCPApprovalRequest':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPApprovalRequest),
        ) as MCPApprovalRequest;
        oneOfType = MCPApprovalRequest;
        break;
      case r'MCPApprovalResponse':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPApprovalResponse),
        ) as MCPApprovalResponse;
        oneOfType = MCPApprovalResponse;
        break;
      case r'MCPListTools':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPListTools),
        ) as MCPListTools;
        oneOfType = MCPListTools;
        break;
      case r'MCPToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPToolCall),
        ) as MCPToolCall;
        oneOfType = MCPToolCall;
        break;
      case r'OutputMessage':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(OutputMessage),
        ) as OutputMessage;
        oneOfType = OutputMessage;
        break;
      case r'ReasoningItem':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ReasoningItem),
        ) as ReasoningItem;
        oneOfType = ReasoningItem;
        break;
      case r'WebSearchToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(WebSearchToolCall),
        ) as WebSearchToolCall;
        oneOfType = WebSearchToolCall;
        break;
      default:
        throw UnsupportedError("Couldn't deserialize oneOf for the discriminator value: ${discValue}");
    }
    result.oneOf = OneOfDynamic(typeIndex: oneOfTypes.indexOf(oneOfType), types: oneOfTypes, value: oneOfResult);
    return result.build();
  }
}

class ItemTypeEnum extends EnumClass {

  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'message')
  static const ItemTypeEnum message = _$itemTypeEnum_message;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'file_search_call')
  static const ItemTypeEnum fileSearchCall = _$itemTypeEnum_fileSearchCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'computer_call')
  static const ItemTypeEnum computerCall = _$itemTypeEnum_computerCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'computer_call_output')
  static const ItemTypeEnum computerCallOutput = _$itemTypeEnum_computerCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'web_search_call')
  static const ItemTypeEnum webSearchCall = _$itemTypeEnum_webSearchCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'function_call')
  static const ItemTypeEnum functionCall = _$itemTypeEnum_functionCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'function_call_output')
  static const ItemTypeEnum functionCallOutput = _$itemTypeEnum_functionCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'reasoning')
  static const ItemTypeEnum reasoning = _$itemTypeEnum_reasoning;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'image_generation_call')
  static const ItemTypeEnum imageGenerationCall = _$itemTypeEnum_imageGenerationCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'code_interpreter_call')
  static const ItemTypeEnum codeInterpreterCall = _$itemTypeEnum_codeInterpreterCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'local_shell_call')
  static const ItemTypeEnum localShellCall = _$itemTypeEnum_localShellCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'local_shell_call_output')
  static const ItemTypeEnum localShellCallOutput = _$itemTypeEnum_localShellCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_list_tools')
  static const ItemTypeEnum mcpListTools = _$itemTypeEnum_mcpListTools;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_approval_request')
  static const ItemTypeEnum mcpApprovalRequest = _$itemTypeEnum_mcpApprovalRequest;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_approval_response')
  static const ItemTypeEnum mcpApprovalResponse = _$itemTypeEnum_mcpApprovalResponse;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_call')
  static const ItemTypeEnum mcpCall = _$itemTypeEnum_mcpCall;

  static Serializer<ItemTypeEnum> get serializer => _$itemTypeEnumSerializer;

  const ItemTypeEnum._(String name): super(name);

  static BuiltSet<ItemTypeEnum> get values => _$itemTypeEnumValues;
  static ItemTypeEnum valueOf(String name) => _$itemTypeEnumValueOf(name);
}

class ItemRoleEnum extends EnumClass {

  /// The role of the output message. Always `assistant`. 
  @BuiltValueEnumConst(wireName: r'assistant')
  static const ItemRoleEnum assistant = _$itemRoleEnum_assistant;

  static Serializer<ItemRoleEnum> get serializer => _$itemRoleEnumSerializer;

  const ItemRoleEnum._(String name): super(name);

  static BuiltSet<ItemRoleEnum> get values => _$itemRoleEnumValues;
  static ItemRoleEnum valueOf(String name) => _$itemRoleEnumValueOf(name);
}

class ItemStatusEnum extends EnumClass {

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'in_progress')
  static const ItemStatusEnum inProgress = _$itemStatusEnum_inProgress;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'completed')
  static const ItemStatusEnum completed = _$itemStatusEnum_completed;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'incomplete')
  static const ItemStatusEnum incomplete = _$itemStatusEnum_incomplete;

  static Serializer<ItemStatusEnum> get serializer => _$itemStatusEnumSerializer;

  const ItemStatusEnum._(String name): super(name);

  static BuiltSet<ItemStatusEnum> get values => _$itemStatusEnumValues;
  static ItemStatusEnum valueOf(String name) => _$itemStatusEnumValueOf(name);
}

