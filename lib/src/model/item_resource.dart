//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:openai_flutter_sdk/src/model/local_shell_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/output_message.dart';
import 'package:openai_flutter_sdk/src/model/computer_tool_call_output_resource.dart';
import 'package:openai_flutter_sdk/src/model/local_shell_exec_action.dart';
import 'package:openai_flutter_sdk/src/model/code_interpreter_tool_call_outputs_inner.dart';
import 'package:openai_flutter_sdk/src/model/mcp_approval_response_resource.dart';
import 'package:openai_flutter_sdk/src/model/computer_tool_call_safety_check.dart';
import 'package:openai_flutter_sdk/src/model/file_search_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/file_search_tool_call_results_inner.dart';
import 'package:openai_flutter_sdk/src/model/output_content.dart';
import 'package:openai_flutter_sdk/src/model/local_shell_tool_call_output.dart';
import 'package:openai_flutter_sdk/src/model/mcp_list_tools_tool.dart';
import 'package:openai_flutter_sdk/src/model/web_search_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/code_interpreter_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/function_tool_call_resource.dart';
import 'package:built_collection/built_collection.dart';
import 'package:openai_flutter_sdk/src/model/image_gen_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_list_tools.dart';
import 'package:openai_flutter_sdk/src/model/function_tool_call_output_resource.dart';
import 'package:openai_flutter_sdk/src/model/computer_tool_call.dart';
import 'package:openai_flutter_sdk/src/model/mcp_approval_request.dart';
import 'package:openai_flutter_sdk/src/model/input_message_resource.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:one_of/one_of.dart';

part 'item_resource.g.dart';

/// Content item used to generate a response. 
///
/// Properties:
/// * [type] - The type of the message input. Always set to `message`. 
/// * [role] - The role of the output message. Always `assistant`. 
/// * [status] - The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
/// * [content] - The content of the output message. 
/// * [id] - The unique ID of the tool call. 
/// * [queries] - The queries used to search for files. 
/// * [results] - The results of the file search tool call. 
/// * [callId] - The unique ID of the local shell tool call generated by the model. 
/// * [action] 
/// * [pendingSafetyChecks] - The pending safety checks for the computer call. 
/// * [acknowledgedSafetyChecks] - The safety checks reported by the API that have been acknowledged by the  developer. 
/// * [output] - The output from the tool call. 
/// * [name] - The name of the tool that was run. 
/// * [arguments] - A JSON string of the arguments passed to the tool. 
/// * [result] - The generated image encoded in base64. 
/// * [containerId] - The ID of the container used to run the code. 
/// * [code] - The code to run, or null if not available. 
/// * [outputs] - The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
/// * [serverLabel] - The label of the MCP server running the tool. 
/// * [tools] - The tools available on the server. 
/// * [error] - The error from the tool call, if any. 
/// * [approvalRequestId] - The ID of the approval request being answered. 
/// * [approve] - Whether the request was approved. 
/// * [reason] - Optional reason for the decision. 
@BuiltValue()
abstract class ItemResource implements Built<ItemResource, ItemResourceBuilder> {
  /// One Of [CodeInterpreterToolCall], [ComputerToolCall], [ComputerToolCallOutputResource], [FileSearchToolCall], [FunctionToolCallOutputResource], [FunctionToolCallResource], [ImageGenToolCall], [InputMessageResource], [LocalShellToolCall], [LocalShellToolCallOutput], [MCPApprovalRequest], [MCPApprovalResponseResource], [MCPListTools], [MCPToolCall], [OutputMessage], [WebSearchToolCall]
  OneOf get oneOf;

  static const String discriminatorFieldName = r'type';

  static const Map<String, Type> discriminatorMapping = {
    r'CodeInterpreterToolCall': CodeInterpreterToolCall,
    r'ComputerToolCall': ComputerToolCall,
    r'ComputerToolCallOutputResource': ComputerToolCallOutputResource,
    r'FileSearchToolCall': FileSearchToolCall,
    r'FunctionToolCallOutputResource': FunctionToolCallOutputResource,
    r'FunctionToolCallResource': FunctionToolCallResource,
    r'ImageGenToolCall': ImageGenToolCall,
    r'InputMessageResource': InputMessageResource,
    r'LocalShellToolCall': LocalShellToolCall,
    r'LocalShellToolCallOutput': LocalShellToolCallOutput,
    r'MCPApprovalRequest': MCPApprovalRequest,
    r'MCPApprovalResponseResource': MCPApprovalResponseResource,
    r'MCPListTools': MCPListTools,
    r'MCPToolCall': MCPToolCall,
    r'OutputMessage': OutputMessage,
    r'WebSearchToolCall': WebSearchToolCall,
  };

  ItemResource._();

  factory ItemResource([void updates(ItemResourceBuilder b)]) = _$ItemResource;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(ItemResourceBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<ItemResource> get serializer => _$ItemResourceSerializer();
}

extension ItemResourceDiscriminatorExt on ItemResource {
    String? get discriminatorValue {
        if (this is CodeInterpreterToolCall) {
            return r'CodeInterpreterToolCall';
        }
        if (this is ComputerToolCall) {
            return r'ComputerToolCall';
        }
        if (this is ComputerToolCallOutputResource) {
            return r'ComputerToolCallOutputResource';
        }
        if (this is FileSearchToolCall) {
            return r'FileSearchToolCall';
        }
        if (this is FunctionToolCallOutputResource) {
            return r'FunctionToolCallOutputResource';
        }
        if (this is FunctionToolCallResource) {
            return r'FunctionToolCallResource';
        }
        if (this is ImageGenToolCall) {
            return r'ImageGenToolCall';
        }
        if (this is InputMessageResource) {
            return r'InputMessageResource';
        }
        if (this is LocalShellToolCall) {
            return r'LocalShellToolCall';
        }
        if (this is LocalShellToolCallOutput) {
            return r'LocalShellToolCallOutput';
        }
        if (this is MCPApprovalRequest) {
            return r'MCPApprovalRequest';
        }
        if (this is MCPApprovalResponseResource) {
            return r'MCPApprovalResponseResource';
        }
        if (this is MCPListTools) {
            return r'MCPListTools';
        }
        if (this is MCPToolCall) {
            return r'MCPToolCall';
        }
        if (this is OutputMessage) {
            return r'OutputMessage';
        }
        if (this is WebSearchToolCall) {
            return r'WebSearchToolCall';
        }
        return null;
    }
}
extension ItemResourceBuilderDiscriminatorExt on ItemResourceBuilder {
    String? get discriminatorValue {
        if (this is CodeInterpreterToolCallBuilder) {
            return r'CodeInterpreterToolCall';
        }
        if (this is ComputerToolCallBuilder) {
            return r'ComputerToolCall';
        }
        if (this is ComputerToolCallOutputResourceBuilder) {
            return r'ComputerToolCallOutputResource';
        }
        if (this is FileSearchToolCallBuilder) {
            return r'FileSearchToolCall';
        }
        if (this is FunctionToolCallOutputResourceBuilder) {
            return r'FunctionToolCallOutputResource';
        }
        if (this is FunctionToolCallResourceBuilder) {
            return r'FunctionToolCallResource';
        }
        if (this is ImageGenToolCallBuilder) {
            return r'ImageGenToolCall';
        }
        if (this is InputMessageResourceBuilder) {
            return r'InputMessageResource';
        }
        if (this is LocalShellToolCallBuilder) {
            return r'LocalShellToolCall';
        }
        if (this is LocalShellToolCallOutputBuilder) {
            return r'LocalShellToolCallOutput';
        }
        if (this is MCPApprovalRequestBuilder) {
            return r'MCPApprovalRequest';
        }
        if (this is MCPApprovalResponseResourceBuilder) {
            return r'MCPApprovalResponseResource';
        }
        if (this is MCPListToolsBuilder) {
            return r'MCPListTools';
        }
        if (this is MCPToolCallBuilder) {
            return r'MCPToolCall';
        }
        if (this is OutputMessageBuilder) {
            return r'OutputMessage';
        }
        if (this is WebSearchToolCallBuilder) {
            return r'WebSearchToolCall';
        }
        return null;
    }
}

class _$ItemResourceSerializer implements PrimitiveSerializer<ItemResource> {
  @override
  final Iterable<Type> types = const [ItemResource, _$ItemResource];

  @override
  final String wireName = r'ItemResource';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    ItemResource object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
  }

  @override
  Object serialize(
    Serializers serializers,
    ItemResource object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final oneOf = object.oneOf;
    return serializers.serialize(oneOf.value, specifiedType: FullType(oneOf.valueType))!;
  }

  @override
  ItemResource deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = ItemResourceBuilder();
    Object? oneOfDataSrc;
    final serializedList = (serialized as Iterable<Object?>).toList();
    final discIndex = serializedList.indexOf(ItemResource.discriminatorFieldName) + 1;
    final discValue = serializers.deserialize(serializedList[discIndex], specifiedType: FullType(String)) as String;
    oneOfDataSrc = serialized;
    final oneOfTypes = [CodeInterpreterToolCall, ComputerToolCall, ComputerToolCallOutputResource, FileSearchToolCall, FunctionToolCallOutputResource, FunctionToolCallResource, ImageGenToolCall, InputMessageResource, LocalShellToolCall, LocalShellToolCallOutput, MCPApprovalRequest, MCPApprovalResponseResource, MCPListTools, MCPToolCall, OutputMessage, WebSearchToolCall, ];
    Object oneOfResult;
    Type oneOfType;
    switch (discValue) {
      case r'CodeInterpreterToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(CodeInterpreterToolCall),
        ) as CodeInterpreterToolCall;
        oneOfType = CodeInterpreterToolCall;
        break;
      case r'ComputerToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ComputerToolCall),
        ) as ComputerToolCall;
        oneOfType = ComputerToolCall;
        break;
      case r'ComputerToolCallOutputResource':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ComputerToolCallOutputResource),
        ) as ComputerToolCallOutputResource;
        oneOfType = ComputerToolCallOutputResource;
        break;
      case r'FileSearchToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FileSearchToolCall),
        ) as FileSearchToolCall;
        oneOfType = FileSearchToolCall;
        break;
      case r'FunctionToolCallOutputResource':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FunctionToolCallOutputResource),
        ) as FunctionToolCallOutputResource;
        oneOfType = FunctionToolCallOutputResource;
        break;
      case r'FunctionToolCallResource':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(FunctionToolCallResource),
        ) as FunctionToolCallResource;
        oneOfType = FunctionToolCallResource;
        break;
      case r'ImageGenToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(ImageGenToolCall),
        ) as ImageGenToolCall;
        oneOfType = ImageGenToolCall;
        break;
      case r'InputMessageResource':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(InputMessageResource),
        ) as InputMessageResource;
        oneOfType = InputMessageResource;
        break;
      case r'LocalShellToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(LocalShellToolCall),
        ) as LocalShellToolCall;
        oneOfType = LocalShellToolCall;
        break;
      case r'LocalShellToolCallOutput':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(LocalShellToolCallOutput),
        ) as LocalShellToolCallOutput;
        oneOfType = LocalShellToolCallOutput;
        break;
      case r'MCPApprovalRequest':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPApprovalRequest),
        ) as MCPApprovalRequest;
        oneOfType = MCPApprovalRequest;
        break;
      case r'MCPApprovalResponseResource':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPApprovalResponseResource),
        ) as MCPApprovalResponseResource;
        oneOfType = MCPApprovalResponseResource;
        break;
      case r'MCPListTools':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPListTools),
        ) as MCPListTools;
        oneOfType = MCPListTools;
        break;
      case r'MCPToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(MCPToolCall),
        ) as MCPToolCall;
        oneOfType = MCPToolCall;
        break;
      case r'OutputMessage':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(OutputMessage),
        ) as OutputMessage;
        oneOfType = OutputMessage;
        break;
      case r'WebSearchToolCall':
        oneOfResult = serializers.deserialize(
          oneOfDataSrc,
          specifiedType: FullType(WebSearchToolCall),
        ) as WebSearchToolCall;
        oneOfType = WebSearchToolCall;
        break;
      default:
        throw UnsupportedError("Couldn't deserialize oneOf for the discriminator value: ${discValue}");
    }
    result.oneOf = OneOfDynamic(typeIndex: oneOfTypes.indexOf(oneOfType), types: oneOfTypes, value: oneOfResult);
    return result.build();
  }
}

class ItemResourceTypeEnum extends EnumClass {

  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'message')
  static const ItemResourceTypeEnum message = _$itemResourceTypeEnum_message;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'file_search_call')
  static const ItemResourceTypeEnum fileSearchCall = _$itemResourceTypeEnum_fileSearchCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'computer_call')
  static const ItemResourceTypeEnum computerCall = _$itemResourceTypeEnum_computerCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'computer_call_output')
  static const ItemResourceTypeEnum computerCallOutput = _$itemResourceTypeEnum_computerCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'web_search_call')
  static const ItemResourceTypeEnum webSearchCall = _$itemResourceTypeEnum_webSearchCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'function_call')
  static const ItemResourceTypeEnum functionCall = _$itemResourceTypeEnum_functionCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'function_call_output')
  static const ItemResourceTypeEnum functionCallOutput = _$itemResourceTypeEnum_functionCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'image_generation_call')
  static const ItemResourceTypeEnum imageGenerationCall = _$itemResourceTypeEnum_imageGenerationCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'code_interpreter_call')
  static const ItemResourceTypeEnum codeInterpreterCall = _$itemResourceTypeEnum_codeInterpreterCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'local_shell_call')
  static const ItemResourceTypeEnum localShellCall = _$itemResourceTypeEnum_localShellCall;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'local_shell_call_output')
  static const ItemResourceTypeEnum localShellCallOutput = _$itemResourceTypeEnum_localShellCallOutput;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_list_tools')
  static const ItemResourceTypeEnum mcpListTools = _$itemResourceTypeEnum_mcpListTools;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_approval_request')
  static const ItemResourceTypeEnum mcpApprovalRequest = _$itemResourceTypeEnum_mcpApprovalRequest;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_approval_response')
  static const ItemResourceTypeEnum mcpApprovalResponse = _$itemResourceTypeEnum_mcpApprovalResponse;
  /// The type of the message input. Always set to `message`. 
  @BuiltValueEnumConst(wireName: r'mcp_call')
  static const ItemResourceTypeEnum mcpCall = _$itemResourceTypeEnum_mcpCall;

  static Serializer<ItemResourceTypeEnum> get serializer => _$itemResourceTypeEnumSerializer;

  const ItemResourceTypeEnum._(String name): super(name);

  static BuiltSet<ItemResourceTypeEnum> get values => _$itemResourceTypeEnumValues;
  static ItemResourceTypeEnum valueOf(String name) => _$itemResourceTypeEnumValueOf(name);
}

class ItemResourceRoleEnum extends EnumClass {

  /// The role of the output message. Always `assistant`. 
  @BuiltValueEnumConst(wireName: r'assistant')
  static const ItemResourceRoleEnum assistant = _$itemResourceRoleEnum_assistant;

  static Serializer<ItemResourceRoleEnum> get serializer => _$itemResourceRoleEnumSerializer;

  const ItemResourceRoleEnum._(String name): super(name);

  static BuiltSet<ItemResourceRoleEnum> get values => _$itemResourceRoleEnumValues;
  static ItemResourceRoleEnum valueOf(String name) => _$itemResourceRoleEnumValueOf(name);
}

class ItemResourceStatusEnum extends EnumClass {

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'in_progress')
  static const ItemResourceStatusEnum inProgress = _$itemResourceStatusEnum_inProgress;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'completed')
  static const ItemResourceStatusEnum completed = _$itemResourceStatusEnum_completed;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'incomplete')
  static const ItemResourceStatusEnum incomplete = _$itemResourceStatusEnum_incomplete;

  static Serializer<ItemResourceStatusEnum> get serializer => _$itemResourceStatusEnumSerializer;

  const ItemResourceStatusEnum._(String name): super(name);

  static BuiltSet<ItemResourceStatusEnum> get values => _$itemResourceStatusEnumValues;
  static ItemResourceStatusEnum valueOf(String name) => _$itemResourceStatusEnumValueOf(name);
}

