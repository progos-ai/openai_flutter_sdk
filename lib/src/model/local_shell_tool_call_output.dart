//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'local_shell_tool_call_output.g.dart';

/// The output of a local shell tool call. 
///
/// Properties:
/// * [type] - The type of the local shell tool call output. Always `local_shell_call_output`. 
/// * [id] - The unique ID of the local shell tool call generated by the model. 
/// * [output] - A JSON string of the output of the local shell tool call. 
/// * [status] - The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
@BuiltValue()
abstract class LocalShellToolCallOutput implements Built<LocalShellToolCallOutput, LocalShellToolCallOutputBuilder> {
  /// The type of the local shell tool call output. Always `local_shell_call_output`. 
  @BuiltValueField(wireName: r'type')
  LocalShellToolCallOutputTypeEnum get type;
  // enum typeEnum {  local_shell_call_output,  };

  /// The unique ID of the local shell tool call generated by the model. 
  @BuiltValueField(wireName: r'id')
  String get id;

  /// A JSON string of the output of the local shell tool call. 
  @BuiltValueField(wireName: r'output')
  String get output;

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueField(wireName: r'status')
  LocalShellToolCallOutputStatusEnum? get status;
  // enum statusEnum {  in_progress,  completed,  incomplete,  };

  LocalShellToolCallOutput._();

  factory LocalShellToolCallOutput([void updates(LocalShellToolCallOutputBuilder b)]) = _$LocalShellToolCallOutput;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(LocalShellToolCallOutputBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<LocalShellToolCallOutput> get serializer => _$LocalShellToolCallOutputSerializer();
}

class _$LocalShellToolCallOutputSerializer implements PrimitiveSerializer<LocalShellToolCallOutput> {
  @override
  final Iterable<Type> types = const [LocalShellToolCallOutput, _$LocalShellToolCallOutput];

  @override
  final String wireName = r'LocalShellToolCallOutput';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    LocalShellToolCallOutput object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'type';
    yield serializers.serialize(
      object.type,
      specifiedType: const FullType(LocalShellToolCallOutputTypeEnum),
    );
    yield r'id';
    yield serializers.serialize(
      object.id,
      specifiedType: const FullType(String),
    );
    yield r'output';
    yield serializers.serialize(
      object.output,
      specifiedType: const FullType(String),
    );
    if (object.status != null) {
      yield r'status';
      yield serializers.serialize(
        object.status,
        specifiedType: const FullType(LocalShellToolCallOutputStatusEnum),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    LocalShellToolCallOutput object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required LocalShellToolCallOutputBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'type':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(LocalShellToolCallOutputTypeEnum),
          ) as LocalShellToolCallOutputTypeEnum;
          result.type = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'output':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.output = valueDes;
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(LocalShellToolCallOutputStatusEnum),
          ) as LocalShellToolCallOutputStatusEnum;
          result.status = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  LocalShellToolCallOutput deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = LocalShellToolCallOutputBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class LocalShellToolCallOutputTypeEnum extends EnumClass {

  /// The type of the local shell tool call output. Always `local_shell_call_output`. 
  @BuiltValueEnumConst(wireName: r'local_shell_call_output')
  static const LocalShellToolCallOutputTypeEnum localShellCallOutput = _$localShellToolCallOutputTypeEnum_localShellCallOutput;

  static Serializer<LocalShellToolCallOutputTypeEnum> get serializer => _$localShellToolCallOutputTypeEnumSerializer;

  const LocalShellToolCallOutputTypeEnum._(String name): super(name);

  static BuiltSet<LocalShellToolCallOutputTypeEnum> get values => _$localShellToolCallOutputTypeEnumValues;
  static LocalShellToolCallOutputTypeEnum valueOf(String name) => _$localShellToolCallOutputTypeEnumValueOf(name);
}

class LocalShellToolCallOutputStatusEnum extends EnumClass {

  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'in_progress')
  static const LocalShellToolCallOutputStatusEnum inProgress = _$localShellToolCallOutputStatusEnum_inProgress;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'completed')
  static const LocalShellToolCallOutputStatusEnum completed = _$localShellToolCallOutputStatusEnum_completed;
  /// The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
  @BuiltValueEnumConst(wireName: r'incomplete')
  static const LocalShellToolCallOutputStatusEnum incomplete = _$localShellToolCallOutputStatusEnum_incomplete;

  static Serializer<LocalShellToolCallOutputStatusEnum> get serializer => _$localShellToolCallOutputStatusEnumSerializer;

  const LocalShellToolCallOutputStatusEnum._(String name): super(name);

  static BuiltSet<LocalShellToolCallOutputStatusEnum> get values => _$localShellToolCallOutputStatusEnumValues;
  static LocalShellToolCallOutputStatusEnum valueOf(String name) => _$localShellToolCallOutputStatusEnumValueOf(name);
}

