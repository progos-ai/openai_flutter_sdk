//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:openai_flutter_sdk/src/model/realtime_conversation_item_content_inner.dart';
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'realtime_conversation_item.g.dart';

/// The item to add to the conversation.
///
/// Properties:
/// * [id] - The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. 
/// * [type] - The type of the item (`message`, `function_call`, `function_call_output`). 
/// * [object] - Identifier for the API object being returned - always `realtime.item`. 
/// * [status] - The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
/// * [role] - The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
/// * [content] - The content of the message, applicable for `message` items.  - Message items of role `system` support only `input_text` content - Message items of role `user` support `input_text` and `input_audio`    content - Message items of role `assistant` support `text` content. 
/// * [callId] - The ID of the function call (for `function_call` and  `function_call_output` items). If passed on a `function_call_output`  item, the server will check that a `function_call` item with the same  ID exists in the conversation history. 
/// * [name] - The name of the function being called (for `function_call` items). 
/// * [arguments] - The arguments of the function call (for `function_call` items). 
/// * [output] - The output of the function call (for `function_call_output` items). 
@BuiltValue()
abstract class RealtimeConversationItem implements Built<RealtimeConversationItem, RealtimeConversationItemBuilder> {
  /// The unique ID of the item, this can be generated by the client to help  manage server-side context, but is not required because the server will  generate one if not provided. 
  @BuiltValueField(wireName: r'id')
  String? get id;

  /// The type of the item (`message`, `function_call`, `function_call_output`). 
  @BuiltValueField(wireName: r'type')
  RealtimeConversationItemTypeEnum? get type;
  // enum typeEnum {  message,  function_call,  function_call_output,  };

  /// Identifier for the API object being returned - always `realtime.item`. 
  @BuiltValueField(wireName: r'object')
  RealtimeConversationItemObjectEnum? get object;
  // enum objectEnum {  realtime.item,  };

  /// The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
  @BuiltValueField(wireName: r'status')
  RealtimeConversationItemStatusEnum? get status;
  // enum statusEnum {  completed,  incomplete,  };

  /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
  @BuiltValueField(wireName: r'role')
  RealtimeConversationItemRoleEnum? get role;
  // enum roleEnum {  user,  assistant,  system,  };

  /// The content of the message, applicable for `message` items.  - Message items of role `system` support only `input_text` content - Message items of role `user` support `input_text` and `input_audio`    content - Message items of role `assistant` support `text` content. 
  @BuiltValueField(wireName: r'content')
  BuiltList<RealtimeConversationItemContentInner>? get content;

  /// The ID of the function call (for `function_call` and  `function_call_output` items). If passed on a `function_call_output`  item, the server will check that a `function_call` item with the same  ID exists in the conversation history. 
  @BuiltValueField(wireName: r'call_id')
  String? get callId;

  /// The name of the function being called (for `function_call` items). 
  @BuiltValueField(wireName: r'name')
  String? get name;

  /// The arguments of the function call (for `function_call` items). 
  @BuiltValueField(wireName: r'arguments')
  String? get arguments;

  /// The output of the function call (for `function_call_output` items). 
  @BuiltValueField(wireName: r'output')
  String? get output;

  RealtimeConversationItem._();

  factory RealtimeConversationItem([void updates(RealtimeConversationItemBuilder b)]) = _$RealtimeConversationItem;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(RealtimeConversationItemBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<RealtimeConversationItem> get serializer => _$RealtimeConversationItemSerializer();
}

class _$RealtimeConversationItemSerializer implements PrimitiveSerializer<RealtimeConversationItem> {
  @override
  final Iterable<Type> types = const [RealtimeConversationItem, _$RealtimeConversationItem];

  @override
  final String wireName = r'RealtimeConversationItem';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    RealtimeConversationItem object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.id != null) {
      yield r'id';
      yield serializers.serialize(
        object.id,
        specifiedType: const FullType(String),
      );
    }
    if (object.type != null) {
      yield r'type';
      yield serializers.serialize(
        object.type,
        specifiedType: const FullType(RealtimeConversationItemTypeEnum),
      );
    }
    if (object.object != null) {
      yield r'object';
      yield serializers.serialize(
        object.object,
        specifiedType: const FullType(RealtimeConversationItemObjectEnum),
      );
    }
    if (object.status != null) {
      yield r'status';
      yield serializers.serialize(
        object.status,
        specifiedType: const FullType(RealtimeConversationItemStatusEnum),
      );
    }
    if (object.role != null) {
      yield r'role';
      yield serializers.serialize(
        object.role,
        specifiedType: const FullType(RealtimeConversationItemRoleEnum),
      );
    }
    if (object.content != null) {
      yield r'content';
      yield serializers.serialize(
        object.content,
        specifiedType: const FullType(BuiltList, [FullType(RealtimeConversationItemContentInner)]),
      );
    }
    if (object.callId != null) {
      yield r'call_id';
      yield serializers.serialize(
        object.callId,
        specifiedType: const FullType(String),
      );
    }
    if (object.name != null) {
      yield r'name';
      yield serializers.serialize(
        object.name,
        specifiedType: const FullType(String),
      );
    }
    if (object.arguments != null) {
      yield r'arguments';
      yield serializers.serialize(
        object.arguments,
        specifiedType: const FullType(String),
      );
    }
    if (object.output != null) {
      yield r'output';
      yield serializers.serialize(
        object.output,
        specifiedType: const FullType(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    RealtimeConversationItem object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required RealtimeConversationItemBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'type':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeConversationItemTypeEnum),
          ) as RealtimeConversationItemTypeEnum;
          result.type = valueDes;
          break;
        case r'object':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeConversationItemObjectEnum),
          ) as RealtimeConversationItemObjectEnum;
          result.object = valueDes;
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeConversationItemStatusEnum),
          ) as RealtimeConversationItemStatusEnum;
          result.status = valueDes;
          break;
        case r'role':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeConversationItemRoleEnum),
          ) as RealtimeConversationItemRoleEnum;
          result.role = valueDes;
          break;
        case r'content':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltList, [FullType(RealtimeConversationItemContentInner)]),
          ) as BuiltList<RealtimeConversationItemContentInner>;
          result.content.replace(valueDes);
          break;
        case r'call_id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.callId = valueDes;
          break;
        case r'name':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.name = valueDes;
          break;
        case r'arguments':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.arguments = valueDes;
          break;
        case r'output':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.output = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  RealtimeConversationItem deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = RealtimeConversationItemBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class RealtimeConversationItemTypeEnum extends EnumClass {

  /// The type of the item (`message`, `function_call`, `function_call_output`). 
  @BuiltValueEnumConst(wireName: r'message')
  static const RealtimeConversationItemTypeEnum message = _$realtimeConversationItemTypeEnum_message;
  /// The type of the item (`message`, `function_call`, `function_call_output`). 
  @BuiltValueEnumConst(wireName: r'function_call')
  static const RealtimeConversationItemTypeEnum functionCall = _$realtimeConversationItemTypeEnum_functionCall;
  /// The type of the item (`message`, `function_call`, `function_call_output`). 
  @BuiltValueEnumConst(wireName: r'function_call_output')
  static const RealtimeConversationItemTypeEnum functionCallOutput = _$realtimeConversationItemTypeEnum_functionCallOutput;

  static Serializer<RealtimeConversationItemTypeEnum> get serializer => _$realtimeConversationItemTypeEnumSerializer;

  const RealtimeConversationItemTypeEnum._(String name): super(name);

  static BuiltSet<RealtimeConversationItemTypeEnum> get values => _$realtimeConversationItemTypeEnumValues;
  static RealtimeConversationItemTypeEnum valueOf(String name) => _$realtimeConversationItemTypeEnumValueOf(name);
}

class RealtimeConversationItemObjectEnum extends EnumClass {

  /// Identifier for the API object being returned - always `realtime.item`. 
  @BuiltValueEnumConst(wireName: r'realtime.item')
  static const RealtimeConversationItemObjectEnum realtimePeriodItem = _$realtimeConversationItemObjectEnum_realtimePeriodItem;

  static Serializer<RealtimeConversationItemObjectEnum> get serializer => _$realtimeConversationItemObjectEnumSerializer;

  const RealtimeConversationItemObjectEnum._(String name): super(name);

  static BuiltSet<RealtimeConversationItemObjectEnum> get values => _$realtimeConversationItemObjectEnumValues;
  static RealtimeConversationItemObjectEnum valueOf(String name) => _$realtimeConversationItemObjectEnumValueOf(name);
}

class RealtimeConversationItemStatusEnum extends EnumClass {

  /// The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
  @BuiltValueEnumConst(wireName: r'completed')
  static const RealtimeConversationItemStatusEnum completed = _$realtimeConversationItemStatusEnum_completed;
  /// The status of the item (`completed`, `incomplete`). These have no effect  on the conversation, but are accepted for consistency with the  `conversation.item.created` event. 
  @BuiltValueEnumConst(wireName: r'incomplete')
  static const RealtimeConversationItemStatusEnum incomplete = _$realtimeConversationItemStatusEnum_incomplete;

  static Serializer<RealtimeConversationItemStatusEnum> get serializer => _$realtimeConversationItemStatusEnumSerializer;

  const RealtimeConversationItemStatusEnum._(String name): super(name);

  static BuiltSet<RealtimeConversationItemStatusEnum> get values => _$realtimeConversationItemStatusEnumValues;
  static RealtimeConversationItemStatusEnum valueOf(String name) => _$realtimeConversationItemStatusEnumValueOf(name);
}

class RealtimeConversationItemRoleEnum extends EnumClass {

  /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
  @BuiltValueEnumConst(wireName: r'user')
  static const RealtimeConversationItemRoleEnum user = _$realtimeConversationItemRoleEnum_user;
  /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
  @BuiltValueEnumConst(wireName: r'assistant')
  static const RealtimeConversationItemRoleEnum assistant = _$realtimeConversationItemRoleEnum_assistant;
  /// The role of the message sender (`user`, `assistant`, `system`), only  applicable for `message` items. 
  @BuiltValueEnumConst(wireName: r'system')
  static const RealtimeConversationItemRoleEnum system = _$realtimeConversationItemRoleEnum_system;

  static Serializer<RealtimeConversationItemRoleEnum> get serializer => _$realtimeConversationItemRoleEnumSerializer;

  const RealtimeConversationItemRoleEnum._(String name): super(name);

  static BuiltSet<RealtimeConversationItemRoleEnum> get values => _$realtimeConversationItemRoleEnumValues;
  static RealtimeConversationItemRoleEnum valueOf(String name) => _$realtimeConversationItemRoleEnumValueOf(name);
}

