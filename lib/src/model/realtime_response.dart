//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:openai_flutter_sdk/src/model/voice_ids_shared.dart';
import 'package:built_collection/built_collection.dart';
import 'package:openai_flutter_sdk/src/model/realtime_response_usage.dart';
import 'package:openai_flutter_sdk/src/model/realtime_conversation_item.dart';
import 'package:openai_flutter_sdk/src/model/realtime_response_status_details.dart';
import 'package:openai_flutter_sdk/src/model/realtime_response_max_output_tokens.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'realtime_response.g.dart';

/// The response resource.
///
/// Properties:
/// * [id] - The unique ID of the response.
/// * [object] - The object type, must be `realtime.response`.
/// * [status] - The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
/// * [statusDetails] 
/// * [output] - The list of output items generated by the response.
/// * [metadata] - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
/// * [usage] 
/// * [conversationId] - Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. 
/// * [voice] - The voice the model used to respond. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. 
/// * [modalities] - The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio. 
/// * [outputAudioFormat] - The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
/// * [temperature] - Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
/// * [maxOutputTokens] 
@BuiltValue()
abstract class RealtimeResponse implements Built<RealtimeResponse, RealtimeResponseBuilder> {
  /// The unique ID of the response.
  @BuiltValueField(wireName: r'id')
  String? get id;

  /// The object type, must be `realtime.response`.
  @BuiltValueField(wireName: r'object')
  RealtimeResponseObjectEnum? get object;
  // enum objectEnum {  realtime.response,  };

  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  @BuiltValueField(wireName: r'status')
  RealtimeResponseStatusEnum? get status;
  // enum statusEnum {  completed,  cancelled,  failed,  incomplete,  };

  @BuiltValueField(wireName: r'status_details')
  RealtimeResponseStatusDetails? get statusDetails;

  /// The list of output items generated by the response.
  @BuiltValueField(wireName: r'output')
  BuiltList<RealtimeConversationItem>? get output;

  /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
  @BuiltValueField(wireName: r'metadata')
  BuiltMap<String, String>? get metadata;

  @BuiltValueField(wireName: r'usage')
  RealtimeResponseUsage? get usage;

  /// Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. 
  @BuiltValueField(wireName: r'conversation_id')
  String? get conversationId;

  /// The voice the model used to respond. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. 
  @BuiltValueField(wireName: r'voice')
  VoiceIdsShared? get voice;

  /// The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio. 
  @BuiltValueField(wireName: r'modalities')
  BuiltList<RealtimeResponseCreateParamsModalitiesEnum>? get modalities;
  // enum modalitiesEnum {  text,  audio,  };

  /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
  @BuiltValueField(wireName: r'output_audio_format')
  RealtimeResponseOutputAudioFormatEnum? get outputAudioFormat;
  // enum outputAudioFormatEnum {  pcm16,  g711_ulaw,  g711_alaw,  };

  /// Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
  @BuiltValueField(wireName: r'temperature')
  num? get temperature;

  @BuiltValueField(wireName: r'max_output_tokens')
  RealtimeResponseMaxOutputTokens? get maxOutputTokens;

  RealtimeResponse._();

  factory RealtimeResponse([void updates(RealtimeResponseBuilder b)]) = _$RealtimeResponse;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(RealtimeResponseBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<RealtimeResponse> get serializer => _$RealtimeResponseSerializer();
}

class _$RealtimeResponseSerializer implements PrimitiveSerializer<RealtimeResponse> {
  @override
  final Iterable<Type> types = const [RealtimeResponse, _$RealtimeResponse];

  @override
  final String wireName = r'RealtimeResponse';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    RealtimeResponse object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.id != null) {
      yield r'id';
      yield serializers.serialize(
        object.id,
        specifiedType: const FullType(String),
      );
    }
    if (object.object != null) {
      yield r'object';
      yield serializers.serialize(
        object.object,
        specifiedType: const FullType(RealtimeResponseObjectEnum),
      );
    }
    if (object.status != null) {
      yield r'status';
      yield serializers.serialize(
        object.status,
        specifiedType: const FullType(RealtimeResponseStatusEnum),
      );
    }
    if (object.statusDetails != null) {
      yield r'status_details';
      yield serializers.serialize(
        object.statusDetails,
        specifiedType: const FullType(RealtimeResponseStatusDetails),
      );
    }
    if (object.output != null) {
      yield r'output';
      yield serializers.serialize(
        object.output,
        specifiedType: const FullType(BuiltList, [FullType(RealtimeConversationItem)]),
      );
    }
    if (object.metadata != null) {
      yield r'metadata';
      yield serializers.serialize(
        object.metadata,
        specifiedType: const FullType(BuiltMap, [FullType(String), FullType(String)]),
      );
    }
    if (object.usage != null) {
      yield r'usage';
      yield serializers.serialize(
        object.usage,
        specifiedType: const FullType(RealtimeResponseUsage),
      );
    }
    if (object.conversationId != null) {
      yield r'conversation_id';
      yield serializers.serialize(
        object.conversationId,
        specifiedType: const FullType(String),
      );
    }
    if (object.voice != null) {
      yield r'voice';
      yield serializers.serialize(
        object.voice,
        specifiedType: const FullType(VoiceIdsShared),
      );
    }
    if (object.modalities != null) {
      yield r'modalities';
      yield serializers.serialize(
        object.modalities,
        specifiedType: const FullType(BuiltList, [FullType(RealtimeResponseCreateParamsModalitiesEnum)]),
      );
    }
    if (object.outputAudioFormat != null) {
      yield r'output_audio_format';
      yield serializers.serialize(
        object.outputAudioFormat,
        specifiedType: const FullType(RealtimeResponseOutputAudioFormatEnum),
      );
    }
    if (object.temperature != null) {
      yield r'temperature';
      yield serializers.serialize(
        object.temperature,
        specifiedType: const FullType(num),
      );
    }
    if (object.maxOutputTokens != null) {
      yield r'max_output_tokens';
      yield serializers.serialize(
        object.maxOutputTokens,
        specifiedType: const FullType(RealtimeResponseMaxOutputTokens),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    RealtimeResponse object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required RealtimeResponseBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'object':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseObjectEnum),
          ) as RealtimeResponseObjectEnum;
          result.object = valueDes;
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseStatusEnum),
          ) as RealtimeResponseStatusEnum;
          result.status = valueDes;
          break;
        case r'status_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseStatusDetails),
          ) as RealtimeResponseStatusDetails;
          result.statusDetails.replace(valueDes);
          break;
        case r'output':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltList, [FullType(RealtimeConversationItem)]),
          ) as BuiltList<RealtimeConversationItem>;
          result.output.replace(valueDes);
          break;
        case r'metadata':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltMap, [FullType(String), FullType(String)]),
          ) as BuiltMap<String, String>;
          result.metadata.replace(valueDes);
          break;
        case r'usage':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseUsage),
          ) as RealtimeResponseUsage;
          result.usage.replace(valueDes);
          break;
        case r'conversation_id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.conversationId = valueDes;
          break;
        case r'voice':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(VoiceIdsShared),
          ) as VoiceIdsShared;
          result.voice.replace(valueDes);
          break;
        case r'modalities':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltList, [FullType(RealtimeResponseCreateParamsModalitiesEnum)]),
          ) as BuiltList<RealtimeResponseCreateParamsModalitiesEnum>;
          result.modalities.replace(valueDes);
          break;
        case r'output_audio_format':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseOutputAudioFormatEnum),
          ) as RealtimeResponseOutputAudioFormatEnum;
          result.outputAudioFormat = valueDes;
          break;
        case r'temperature':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(num),
          ) as num;
          result.temperature = valueDes;
          break;
        case r'max_output_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RealtimeResponseMaxOutputTokens),
          ) as RealtimeResponseMaxOutputTokens;
          result.maxOutputTokens.replace(valueDes);
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  RealtimeResponse deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = RealtimeResponseBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class RealtimeResponseObjectEnum extends EnumClass {

  /// The object type, must be `realtime.response`.
  @BuiltValueEnumConst(wireName: r'realtime.response')
  static const RealtimeResponseObjectEnum realtimePeriodResponse = _$realtimeResponseObjectEnum_realtimePeriodResponse;

  static Serializer<RealtimeResponseObjectEnum> get serializer => _$realtimeResponseObjectEnumSerializer;

  const RealtimeResponseObjectEnum._(String name): super(name);

  static BuiltSet<RealtimeResponseObjectEnum> get values => _$realtimeResponseObjectEnumValues;
  static RealtimeResponseObjectEnum valueOf(String name) => _$realtimeResponseObjectEnumValueOf(name);
}

class RealtimeResponseStatusEnum extends EnumClass {

  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  @BuiltValueEnumConst(wireName: r'completed')
  static const RealtimeResponseStatusEnum completed = _$realtimeResponseStatusEnum_completed;
  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  @BuiltValueEnumConst(wireName: r'cancelled')
  static const RealtimeResponseStatusEnum cancelled = _$realtimeResponseStatusEnum_cancelled;
  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  @BuiltValueEnumConst(wireName: r'failed')
  static const RealtimeResponseStatusEnum failed = _$realtimeResponseStatusEnum_failed;
  /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
  @BuiltValueEnumConst(wireName: r'incomplete')
  static const RealtimeResponseStatusEnum incomplete = _$realtimeResponseStatusEnum_incomplete;

  static Serializer<RealtimeResponseStatusEnum> get serializer => _$realtimeResponseStatusEnumSerializer;

  const RealtimeResponseStatusEnum._(String name): super(name);

  static BuiltSet<RealtimeResponseStatusEnum> get values => _$realtimeResponseStatusEnumValues;
  static RealtimeResponseStatusEnum valueOf(String name) => _$realtimeResponseStatusEnumValueOf(name);
}

class RealtimeResponseCreateParamsModalitiesEnum extends EnumClass {

  @BuiltValueEnumConst(wireName: r'text')
  static const RealtimeResponseCreateParamsModalitiesEnum text = _$realtimeResponseCreateParamsModalitiesEnum_text;
  @BuiltValueEnumConst(wireName: r'audio')
  static const RealtimeResponseCreateParamsModalitiesEnum audio = _$realtimeResponseCreateParamsModalitiesEnum_audio;

  static Serializer<RealtimeResponseCreateParamsModalitiesEnum> get serializer => _$realtimeResponseCreateParamsModalitiesEnumSerializer;

  const RealtimeResponseCreateParamsModalitiesEnum._(String name): super(name);

  static BuiltSet<RealtimeResponseCreateParamsModalitiesEnum> get values => _$realtimeResponseCreateParamsModalitiesEnumValues;
  static RealtimeResponseCreateParamsModalitiesEnum valueOf(String name) => _$realtimeResponseCreateParamsModalitiesEnumValueOf(name);
}

class RealtimeResponseOutputAudioFormatEnum extends EnumClass {

  /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
  @BuiltValueEnumConst(wireName: r'pcm16')
  static const RealtimeResponseOutputAudioFormatEnum pcm16 = _$realtimeResponseOutputAudioFormatEnum_pcm16;
  /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
  @BuiltValueEnumConst(wireName: r'g711_ulaw')
  static const RealtimeResponseOutputAudioFormatEnum g711Ulaw = _$realtimeResponseOutputAudioFormatEnum_g711Ulaw;
  /// The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
  @BuiltValueEnumConst(wireName: r'g711_alaw')
  static const RealtimeResponseOutputAudioFormatEnum g711Alaw = _$realtimeResponseOutputAudioFormatEnum_g711Alaw;

  static Serializer<RealtimeResponseOutputAudioFormatEnum> get serializer => _$realtimeResponseOutputAudioFormatEnumSerializer;

  const RealtimeResponseOutputAudioFormatEnum._(String name): super(name);

  static BuiltSet<RealtimeResponseOutputAudioFormatEnum> get values => _$realtimeResponseOutputAudioFormatEnumValues;
  static RealtimeResponseOutputAudioFormatEnum valueOf(String name) => _$realtimeResponseOutputAudioFormatEnumValueOf(name);
}

