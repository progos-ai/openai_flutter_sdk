//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openai_flutter_sdk/api.dart';
import 'package:test/test.dart';

// tests for CreateImageRequest
void main() {
  // final instance = CreateImageRequest();

  group('test CreateImageRequest', () {
    // A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
    // String prompt
    test('to test the property `prompt`', () async {
      // TODO
    });

    // CreateImageRequestModel model
    test('to test the property `model`', () async {
      // TODO
    });

    // The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    // int n (default value: 1)
    test('to test the property `n`', () async {
      // TODO
    });

    // The quality of the image that will be generated.   - `auto` (default value) will automatically select the best quality for the given model. - `high`, `medium` and `low` are supported for `gpt-image-1`. - `hd` and `standard` are supported for `dall-e-3`. - `standard` is the only option for `dall-e-2`. 
    // String quality (default value: 'auto')
    test('to test the property `quality`', () async {
      // TODO
    });

    // The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
    // String responseFormat (default value: 'url')
    test('to test the property `responseFormat`', () async {
      // TODO
    });

    // The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
    // String outputFormat (default value: 'png')
    test('to test the property `outputFormat`', () async {
      // TODO
    });

    // The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
    // int outputCompression (default value: 100)
    test('to test the property `outputCompression`', () async {
      // TODO
    });

    // The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
    // String size (default value: 'auto')
    test('to test the property `size`', () async {
      // TODO
    });

    // Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
    // String moderation (default value: 'auto')
    test('to test the property `moderation`', () async {
      // TODO
    });

    // Allows to set transparency for the background of the generated image(s).  This parameter is only supported for `gpt-image-1`. Must be one of  `transparent`, `opaque` or `auto` (default value). When `auto` is used, the  model will automatically determine the best background for the image.  If `transparent`, the output format needs to support transparency, so it  should be set to either `png` (default value) or `webp`. 
    // String background (default value: 'auto')
    test('to test the property `background`', () async {
      // TODO
    });

    // The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
    // String style (default value: 'vivid')
    test('to test the property `style`', () async {
      // TODO
    });

    // A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids). 
    // String user
    test('to test the property `user`', () async {
      // TODO
    });


  });

}
