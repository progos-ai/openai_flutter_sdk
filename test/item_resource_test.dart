//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openai_flutter_sdk/api.dart';
import 'package:test/test.dart';

// tests for ItemResource
void main() {
  // final instance = ItemResource();

  group('test ItemResource', () {
    // The type of the message input. Always set to `message`. 
    // String type
    test('to test the property `type`', () async {
      // TODO
    });

    // The role of the output message. Always `assistant`. 
    // String role
    test('to test the property `role`', () async {
      // TODO
    });

    // The status of the item. One of `in_progress`, `completed`, or `incomplete`. 
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // The content of the output message. 
    // List<OutputContent> content (default value: const [])
    test('to test the property `content`', () async {
      // TODO
    });

    // The unique ID of the tool call. 
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // The queries used to search for files. 
    // List<String> queries (default value: const [])
    test('to test the property `queries`', () async {
      // TODO
    });

    // The results of the file search tool call. 
    // List<FileSearchToolCallResultsInner> results (default value: const [])
    test('to test the property `results`', () async {
      // TODO
    });

    // The unique ID of the local shell tool call generated by the model. 
    // String callId
    test('to test the property `callId`', () async {
      // TODO
    });

    // LocalShellExecAction action
    test('to test the property `action`', () async {
      // TODO
    });

    // The pending safety checks for the computer call. 
    // List<ComputerToolCallSafetyCheck> pendingSafetyChecks (default value: const [])
    test('to test the property `pendingSafetyChecks`', () async {
      // TODO
    });

    // The safety checks reported by the API that have been acknowledged by the  developer. 
    // List<ComputerToolCallSafetyCheck> acknowledgedSafetyChecks (default value: const [])
    test('to test the property `acknowledgedSafetyChecks`', () async {
      // TODO
    });

    // The output from the tool call. 
    // String output
    test('to test the property `output`', () async {
      // TODO
    });

    // The name of the tool that was run. 
    // String name
    test('to test the property `name`', () async {
      // TODO
    });

    // A JSON string of the arguments passed to the tool. 
    // String arguments
    test('to test the property `arguments`', () async {
      // TODO
    });

    // The generated image encoded in base64. 
    // String result
    test('to test the property `result`', () async {
      // TODO
    });

    // The ID of the container used to run the code. 
    // String containerId
    test('to test the property `containerId`', () async {
      // TODO
    });

    // The code to run, or null if not available. 
    // String code
    test('to test the property `code`', () async {
      // TODO
    });

    // The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
    // List<CodeInterpreterToolCallOutputsInner> outputs (default value: const [])
    test('to test the property `outputs`', () async {
      // TODO
    });

    // The label of the MCP server running the tool. 
    // String serverLabel
    test('to test the property `serverLabel`', () async {
      // TODO
    });

    // The tools available on the server. 
    // List<MCPListToolsTool> tools (default value: const [])
    test('to test the property `tools`', () async {
      // TODO
    });

    // The error from the tool call, if any. 
    // String error
    test('to test the property `error`', () async {
      // TODO
    });

    // The ID of the approval request being answered. 
    // String approvalRequestId
    test('to test the property `approvalRequestId`', () async {
      // TODO
    });

    // Whether the request was approved. 
    // bool approve
    test('to test the property `approve`', () async {
      // TODO
    });

    // Optional reason for the decision. 
    // String reason
    test('to test the property `reason`', () async {
      // TODO
    });


  });

}
