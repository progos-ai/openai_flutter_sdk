import 'package:test/test.dart';
import 'package:openai_flutter_sdk/openai_flutter_sdk.dart';

// tests for OutputItem
void main() {
  final instance = OutputItemBuilder();
  // TODO add properties to the builder and call build()

  group(OutputItem, () {
    // The unique ID of the approval request. 
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // The type of the output message. Always `message`. 
    // String type
    test('to test the property `type`', () async {
      // TODO
    });

    // The role of the output message. Always `assistant`. 
    // String role
    test('to test the property `role`', () async {
      // TODO
    });

    // The content of the output message. 
    // BuiltList<OutputContent> content
    test('to test the property `content`', () async {
      // TODO
    });

    // The status of the local shell call. 
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // The queries used to search for files. 
    // BuiltList<String> queries
    test('to test the property `queries`', () async {
      // TODO
    });

    // The results of the file search tool call. 
    // BuiltList<FileSearchToolCallResultsInner> results
    test('to test the property `results`', () async {
      // TODO
    });

    // The unique ID of the local shell tool call generated by the model. 
    // String callId
    test('to test the property `callId`', () async {
      // TODO
    });

    // The name of the tool to run. 
    // String name
    test('to test the property `name`', () async {
      // TODO
    });

    // A JSON string of arguments for the tool. 
    // String arguments
    test('to test the property `arguments`', () async {
      // TODO
    });

    // LocalShellExecAction action
    test('to test the property `action`', () async {
      // TODO
    });

    // The pending safety checks for the computer call. 
    // BuiltList<ComputerToolCallSafetyCheck> pendingSafetyChecks
    test('to test the property `pendingSafetyChecks`', () async {
      // TODO
    });

    // The encrypted content of the reasoning item - populated when a response is generated with `reasoning.encrypted_content` in the `include` parameter. 
    // String encryptedContent
    test('to test the property `encryptedContent`', () async {
      // TODO
    });

    // Reasoning text contents. 
    // BuiltList<ReasoningItemSummaryInner> summary
    test('to test the property `summary`', () async {
      // TODO
    });

    // The generated image encoded in base64. 
    // String result
    test('to test the property `result`', () async {
      // TODO
    });

    // The ID of the container used to run the code. 
    // String containerId
    test('to test the property `containerId`', () async {
      // TODO
    });

    // The code to run, or null if not available. 
    // String code
    test('to test the property `code`', () async {
      // TODO
    });

    // The outputs generated by the code interpreter, such as logs or images.  Can be null if no outputs are available. 
    // BuiltList<CodeInterpreterToolCallOutputsInner> outputs
    test('to test the property `outputs`', () async {
      // TODO
    });

    // The label of the MCP server making the request. 
    // String serverLabel
    test('to test the property `serverLabel`', () async {
      // TODO
    });

    // The output from the tool call. 
    // String output
    test('to test the property `output`', () async {
      // TODO
    });

    // Error message if the server could not list tools. 
    // String error
    test('to test the property `error`', () async {
      // TODO
    });

    // The tools available on the server. 
    // BuiltList<MCPListToolsTool> tools
    test('to test the property `tools`', () async {
      // TODO
    });

  });
}
