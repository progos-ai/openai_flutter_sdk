import 'package:test/test.dart';
import 'package:openai_flutter_sdk/openai_flutter_sdk.dart';

// tests for RealtimeResponse
void main() {
  final instance = RealtimeResponseBuilder();
  // TODO add properties to the builder and call build()

  group(RealtimeResponse, () {
    // The unique ID of the response.
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // The object type, must be `realtime.response`.
    // String object
    test('to test the property `object`', () async {
      // TODO
    });

    // The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // RealtimeResponseStatusDetails statusDetails
    test('to test the property `statusDetails`', () async {
      // TODO
    });

    // The list of output items generated by the response.
    // BuiltList<RealtimeConversationItem> output
    test('to test the property `output`', () async {
      // TODO
    });

    // Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.   Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters. 
    // BuiltMap<String, String> metadata
    test('to test the property `metadata`', () async {
      // TODO
    });

    // RealtimeResponseUsage usage
    test('to test the property `usage`', () async {
      // TODO
    });

    // Which conversation the response is added to, determined by the `conversation` field in the `response.create` event. If `auto`, the response will be added to the default conversation and the value of `conversation_id` will be an id like `conv_1234`. If `none`, the response will not be added to any conversation and the value of `conversation_id` will be `null`. If responses are being triggered by server VAD, the response will be added to the default conversation, thus the `conversation_id` will be an id like `conv_1234`. 
    // String conversationId
    test('to test the property `conversationId`', () async {
      // TODO
    });

    // The voice the model used to respond. Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. 
    // VoiceIdsShared voice
    test('to test the property `voice`', () async {
      // TODO
    });

    // The set of modalities the model used to respond. If there are multiple modalities, the model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model could be responding in either text or audio. 
    // BuiltList<String> modalities
    test('to test the property `modalities`', () async {
      // TODO
    });

    // The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. 
    // String outputAudioFormat
    test('to test the property `outputAudioFormat`', () async {
      // TODO
    });

    // Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8. 
    // num temperature
    test('to test the property `temperature`', () async {
      // TODO
    });

    // RealtimeResponseMaxOutputTokens maxOutputTokens
    test('to test the property `maxOutputTokens`', () async {
      // TODO
    });

  });
}
